// Generated by ffigen 0.2.0
// Platform: Linux
// Target: 64-bit
SDL_GetPlatform() *sbyte #Foreign("SDL_GetPlatform")
SDL_bool enum #Flags {
	SDL_FALSE = 0_u
	SDL_TRUE = 1_u
}
SDL_DUMMY_ENUM enum #Flags {
	DUMMY_ENUM_VALUE = 0_u
}
SDL_malloc(size ulong) pointer #Foreign("SDL_malloc")
SDL_calloc(nmemb ulong, size ulong) pointer #Foreign("SDL_calloc")
SDL_realloc(mem pointer, size ulong) pointer #Foreign("SDL_realloc")
SDL_free(mem pointer) void #Foreign("SDL_free")
SDL_GetMemoryFunctions(malloc_func *pointer #As("SDL_malloc_func *"), calloc_func *pointer #As("SDL_calloc_func *"), realloc_func *pointer #As("SDL_realloc_func *"), free_func *pointer #As("SDL_free_func *")) void #Foreign("SDL_GetMemoryFunctions")
SDL_SetMemoryFunctions(malloc_func pointer #As("SDL_malloc_func"), calloc_func pointer #As("SDL_calloc_func"), realloc_func pointer #As("SDL_realloc_func"), free_func pointer #As("SDL_free_func")) int #Foreign("SDL_SetMemoryFunctions")
SDL_GetNumAllocations() int #Foreign("SDL_GetNumAllocations")
SDL_getenv(name *sbyte) *sbyte #Foreign("SDL_getenv")
SDL_setenv(name *sbyte, value *sbyte, overwrite int) int #Foreign("SDL_setenv")
SDL_qsort(base pointer, nmemb ulong, size ulong, compare pointer #As("int (*)(const void *, const void *)")) void #Foreign("SDL_qsort")
SDL_abs(x int) int #Foreign("SDL_abs")
SDL_isdigit(x int) int #Foreign("SDL_isdigit")
SDL_isspace(x int) int #Foreign("SDL_isspace")
SDL_isupper(x int) int #Foreign("SDL_isupper")
SDL_islower(x int) int #Foreign("SDL_islower")
SDL_toupper(x int) int #Foreign("SDL_toupper")
SDL_tolower(x int) int #Foreign("SDL_tolower")
SDL_memset(dst pointer, c int, len ulong) pointer #Foreign("SDL_memset")
SDL_memset4(dst pointer, val uint, dwords ulong) void #Foreign("SDL_memset4")
SDL_memcpy(dst pointer, src pointer, len ulong) pointer #Foreign("SDL_memcpy")
SDL_memmove(dst pointer, src pointer, len ulong) pointer #Foreign("SDL_memmove")
SDL_memcmp(s1 pointer, s2 pointer, len ulong) int #Foreign("SDL_memcmp")
SDL_wcslen(wstr *int) ulong #Foreign("SDL_wcslen")
SDL_wcslcpy(dst *int, src *int, maxlen ulong) ulong #Foreign("SDL_wcslcpy")
SDL_wcslcat(dst *int, src *int, maxlen ulong) ulong #Foreign("SDL_wcslcat")
SDL_wcsdup(wstr *int) *int #Foreign("SDL_wcsdup")
SDL_wcsstr(haystack *int, needle *int) *int #Foreign("SDL_wcsstr")
SDL_wcscmp(str1 *int, str2 *int) int #Foreign("SDL_wcscmp")
SDL_wcsncmp(str1 *int, str2 *int, maxlen ulong) int #Foreign("SDL_wcsncmp")
SDL_strlen(str *sbyte) ulong #Foreign("SDL_strlen")
SDL_strlcpy(dst *sbyte, src *sbyte, maxlen ulong) ulong #Foreign("SDL_strlcpy")
SDL_utf8strlcpy(dst *sbyte, src *sbyte, dst_bytes ulong) ulong #Foreign("SDL_utf8strlcpy")
SDL_strlcat(dst *sbyte, src *sbyte, maxlen ulong) ulong #Foreign("SDL_strlcat")
SDL_strdup(str *sbyte) *sbyte #Foreign("SDL_strdup")
SDL_strrev(str *sbyte) *sbyte #Foreign("SDL_strrev")
SDL_strupr(str *sbyte) *sbyte #Foreign("SDL_strupr")
SDL_strlwr(str *sbyte) *sbyte #Foreign("SDL_strlwr")
SDL_strchr(str *sbyte, c int) *sbyte #Foreign("SDL_strchr")
SDL_strrchr(str *sbyte, c int) *sbyte #Foreign("SDL_strrchr")
SDL_strstr(haystack *sbyte, needle *sbyte) *sbyte #Foreign("SDL_strstr")
SDL_strtokr(s1 *sbyte, s2 *sbyte, saveptr **sbyte) *sbyte #Foreign("SDL_strtokr")
SDL_utf8strlen(str *sbyte) ulong #Foreign("SDL_utf8strlen")
SDL_itoa(value int, str *sbyte, radix int) *sbyte #Foreign("SDL_itoa")
SDL_uitoa(value uint, str *sbyte, radix int) *sbyte #Foreign("SDL_uitoa")
SDL_ltoa(value long, str *sbyte, radix int) *sbyte #Foreign("SDL_ltoa")
SDL_ultoa(value ulong, str *sbyte, radix int) *sbyte #Foreign("SDL_ultoa")
SDL_lltoa(value long, str *sbyte, radix int) *sbyte #Foreign("SDL_lltoa")
SDL_ulltoa(value ulong, str *sbyte, radix int) *sbyte #Foreign("SDL_ulltoa")
SDL_atoi(str *sbyte) int #Foreign("SDL_atoi")
SDL_atof(str *sbyte) double #Foreign("SDL_atof")
SDL_strtol(str *sbyte, endp **sbyte, base int) long #Foreign("SDL_strtol")
SDL_strtoul(str *sbyte, endp **sbyte, base int) ulong #Foreign("SDL_strtoul")
SDL_strtoll(str *sbyte, endp **sbyte, base int) long #Foreign("SDL_strtoll")
SDL_strtoull(str *sbyte, endp **sbyte, base int) ulong #Foreign("SDL_strtoull")
SDL_strtod(str *sbyte, endp **sbyte) double #Foreign("SDL_strtod")
SDL_strcmp(str1 *sbyte, str2 *sbyte) int #Foreign("SDL_strcmp")
SDL_strncmp(str1 *sbyte, str2 *sbyte, maxlen ulong) int #Foreign("SDL_strncmp")
SDL_strcasecmp(str1 *sbyte, str2 *sbyte) int #Foreign("SDL_strcasecmp")
SDL_strncasecmp(str1 *sbyte, str2 *sbyte, len ulong) int #Foreign("SDL_strncasecmp")
SDL_sscanf(text *sbyte, fmt *sbyte) int #VarArgs #Foreign("SDL_sscanf")
__va_list_tag struct {
	gp_offset uint
	fp_offset uint
	overflow_arg_area pointer
	reg_save_area pointer
}
SDL_vsscanf(text *sbyte, fmt *sbyte, ap *__va_list_tag #As("va_list")) int #Foreign("SDL_vsscanf")
SDL_snprintf(text *sbyte, maxlen ulong, fmt *sbyte) int #VarArgs #Foreign("SDL_snprintf")
SDL_vsnprintf(text *sbyte, maxlen ulong, fmt *sbyte, ap *__va_list_tag #As("va_list")) int #Foreign("SDL_vsnprintf")
SDL_acos(x double) double #Foreign("SDL_acos")
SDL_acosf(x float) float #Foreign("SDL_acosf")
SDL_asin(x double) double #Foreign("SDL_asin")
SDL_asinf(x float) float #Foreign("SDL_asinf")
SDL_atan(x double) double #Foreign("SDL_atan")
SDL_atanf(x float) float #Foreign("SDL_atanf")
SDL_atan2(x double, y double) double #Foreign("SDL_atan2")
SDL_atan2f(x float, y float) float #Foreign("SDL_atan2f")
SDL_ceil(x double) double #Foreign("SDL_ceil")
SDL_ceilf(x float) float #Foreign("SDL_ceilf")
SDL_copysign(x double, y double) double #Foreign("SDL_copysign")
SDL_copysignf(x float, y float) float #Foreign("SDL_copysignf")
SDL_cos(x double) double #Foreign("SDL_cos")
SDL_cosf(x float) float #Foreign("SDL_cosf")
SDL_exp(x double) double #Foreign("SDL_exp")
SDL_expf(x float) float #Foreign("SDL_expf")
SDL_fabs(x double) double #Foreign("SDL_fabs")
SDL_fabsf(x float) float #Foreign("SDL_fabsf")
SDL_floor(x double) double #Foreign("SDL_floor")
SDL_floorf(x float) float #Foreign("SDL_floorf")
SDL_fmod(x double, y double) double #Foreign("SDL_fmod")
SDL_fmodf(x float, y float) float #Foreign("SDL_fmodf")
SDL_log(x double) double #Foreign("SDL_log")
SDL_logf(x float) float #Foreign("SDL_logf")
SDL_log10(x double) double #Foreign("SDL_log10")
SDL_log10f(x float) float #Foreign("SDL_log10f")
SDL_pow(x double, y double) double #Foreign("SDL_pow")
SDL_powf(x float, y float) float #Foreign("SDL_powf")
SDL_scalbn(x double, n int) double #Foreign("SDL_scalbn")
SDL_scalbnf(x float, n int) float #Foreign("SDL_scalbnf")
SDL_sin(x double) double #Foreign("SDL_sin")
SDL_sinf(x float) float #Foreign("SDL_sinf")
SDL_sqrt(x double) double #Foreign("SDL_sqrt")
SDL_sqrtf(x float) float #Foreign("SDL_sqrtf")
SDL_tan(x double) double #Foreign("SDL_tan")
SDL_tanf(x float) float #Foreign("SDL_tanf")
SDL_iconv_open(tocode *sbyte, fromcode *sbyte) pointer #As("SDL_iconv_t") #Foreign("SDL_iconv_open")
SDL_iconv_close(cd pointer #As("SDL_iconv_t")) int #Foreign("SDL_iconv_close")
SDL_iconv(cd pointer #As("SDL_iconv_t"), inbuf **sbyte, inbytesleft *ulong, outbuf **sbyte, outbytesleft *ulong) ulong #Foreign("SDL_iconv")
SDL_iconv_string(tocode *sbyte, fromcode *sbyte, inbuf *sbyte, inbytesleft ulong) *sbyte #Foreign("SDL_iconv_string")
SDL_memcpy4(dst pointer, src pointer, dwords ulong) pointer #Foreign("SDL_memcpy4")
SDL_main(argc int, argv **sbyte) int #Foreign("SDL_main")
SDL_SetMainReady() void #Foreign("SDL_SetMainReady")
SDL_AssertState enum #Flags {
	SDL_ASSERTION_RETRY = 0_u
	SDL_ASSERTION_BREAK = 1_u
	SDL_ASSERTION_ABORT = 2_u
	SDL_ASSERTION_IGNORE = 3_u
	SDL_ASSERTION_ALWAYS_IGNORE = 4_u
}
SDL_AssertData struct {
	always_ignore int
	trigger_count uint
	condition *sbyte
	filename *sbyte
	linenum int
	function *sbyte
	next *SDL_AssertData
}
SDL_ReportAssertion(p0 *SDL_AssertData #As("SDL_AssertData *"), p1 *sbyte, p2 *sbyte, p3 int) SDL_AssertState #As("SDL_AssertState") #Foreign("SDL_ReportAssertion")
SDL_SetAssertionHandler(handler pointer #As("SDL_AssertionHandler"), userdata pointer) void #Foreign("SDL_SetAssertionHandler")
SDL_GetDefaultAssertionHandler() pointer #As("SDL_AssertionHandler") #Foreign("SDL_GetDefaultAssertionHandler")
SDL_GetAssertionHandler(puserdata *pointer) pointer #As("SDL_AssertionHandler") #Foreign("SDL_GetAssertionHandler")
SDL_GetAssertionReport() *SDL_AssertData #As("const SDL_AssertData *") #Foreign("SDL_GetAssertionReport")
SDL_ResetAssertionReport() void #Foreign("SDL_ResetAssertionReport")
SDL_AtomicTryLock(lock *int) SDL_bool #As("SDL_bool") #Foreign("SDL_AtomicTryLock")
SDL_AtomicLock(lock *int) void #Foreign("SDL_AtomicLock")
SDL_AtomicUnlock(lock *int) void #Foreign("SDL_AtomicUnlock")
SDL_MemoryBarrierReleaseFunction() void #Foreign("SDL_MemoryBarrierReleaseFunction")
SDL_MemoryBarrierAcquireFunction() void #Foreign("SDL_MemoryBarrierAcquireFunction")
SDL_atomic_t struct {
	value int
}
SDL_AtomicCAS(a *SDL_atomic_t #As("SDL_atomic_t *"), oldval int, newval int) SDL_bool #As("SDL_bool") #Foreign("SDL_AtomicCAS")
SDL_AtomicSet(a *SDL_atomic_t #As("SDL_atomic_t *"), v int) int #Foreign("SDL_AtomicSet")
SDL_AtomicGet(a *SDL_atomic_t #As("SDL_atomic_t *")) int #Foreign("SDL_AtomicGet")
SDL_AtomicAdd(a *SDL_atomic_t #As("SDL_atomic_t *"), v int) int #Foreign("SDL_AtomicAdd")
SDL_AtomicCASPtr(a *pointer, oldval pointer, newval pointer) SDL_bool #As("SDL_bool") #Foreign("SDL_AtomicCASPtr")
SDL_AtomicSetPtr(a *pointer, v pointer) pointer #Foreign("SDL_AtomicSetPtr")
SDL_AtomicGetPtr(a *pointer) pointer #Foreign("SDL_AtomicGetPtr")
SDL_SetError(fmt *sbyte) int #VarArgs #Foreign("SDL_SetError")
SDL_GetError() *sbyte #Foreign("SDL_GetError")
SDL_ClearError() void #Foreign("SDL_ClearError")
SDL_errorcode enum #Flags {
	SDL_ENOMEM = 0_u
	SDL_EFREAD = 1_u
	SDL_EFWRITE = 2_u
	SDL_EFSEEK = 3_u
	SDL_UNSUPPORTED = 4_u
	SDL_LASTERROR = 5_u
}
SDL_Error(code SDL_errorcode #As("SDL_errorcode")) int #Foreign("SDL_Error")
SDL_Swap16(x ushort) ushort #Foreign("SDL_Swap16")
SDL_Swap32(x uint) uint #Foreign("SDL_Swap32")
SDL_Swap64(x ulong) ulong #Foreign("SDL_Swap64")
SDL_SwapFloat(x float) float #Foreign("SDL_SwapFloat")
SDL_CreateMutex() pointer #As("SDL_mutex *") #Foreign("SDL_CreateMutex")
SDL_LockMutex(mutex pointer #As("SDL_mutex *")) int #Foreign("SDL_LockMutex")
SDL_TryLockMutex(mutex pointer #As("SDL_mutex *")) int #Foreign("SDL_TryLockMutex")
SDL_UnlockMutex(mutex pointer #As("SDL_mutex *")) int #Foreign("SDL_UnlockMutex")
SDL_DestroyMutex(mutex pointer #As("SDL_mutex *")) void #Foreign("SDL_DestroyMutex")
SDL_CreateSemaphore(initial_value uint) pointer #As("SDL_sem *") #Foreign("SDL_CreateSemaphore")
SDL_DestroySemaphore(sem pointer #As("SDL_sem *")) void #Foreign("SDL_DestroySemaphore")
SDL_SemWait(sem pointer #As("SDL_sem *")) int #Foreign("SDL_SemWait")
SDL_SemTryWait(sem pointer #As("SDL_sem *")) int #Foreign("SDL_SemTryWait")
SDL_SemWaitTimeout(sem pointer #As("SDL_sem *"), ms uint) int #Foreign("SDL_SemWaitTimeout")
SDL_SemPost(sem pointer #As("SDL_sem *")) int #Foreign("SDL_SemPost")
SDL_SemValue(sem pointer #As("SDL_sem *")) uint #Foreign("SDL_SemValue")
SDL_CreateCond() pointer #As("SDL_cond *") #Foreign("SDL_CreateCond")
SDL_DestroyCond(cond pointer #As("SDL_cond *")) void #Foreign("SDL_DestroyCond")
SDL_CondSignal(cond pointer #As("SDL_cond *")) int #Foreign("SDL_CondSignal")
SDL_CondBroadcast(cond pointer #As("SDL_cond *")) int #Foreign("SDL_CondBroadcast")
SDL_CondWait(cond pointer #As("SDL_cond *"), mutex pointer #As("SDL_mutex *")) int #Foreign("SDL_CondWait")
SDL_CondWaitTimeout(cond pointer #As("SDL_cond *"), mutex pointer #As("SDL_mutex *"), ms uint) int #Foreign("SDL_CondWaitTimeout")
SDL_ThreadPriority enum #Flags {
	SDL_THREAD_PRIORITY_LOW = 0_u
	SDL_THREAD_PRIORITY_NORMAL = 1_u
	SDL_THREAD_PRIORITY_HIGH = 2_u
	SDL_THREAD_PRIORITY_TIME_CRITICAL = 3_u
}
SDL_CreateThread(fn pointer #As("SDL_ThreadFunction"), name *sbyte, data pointer) pointer #As("SDL_Thread *") #Foreign("SDL_CreateThread")
SDL_CreateThreadWithStackSize(fn pointer #As("SDL_ThreadFunction"), name *sbyte, stacksize ulong, data pointer) pointer #As("SDL_Thread *") #Foreign("SDL_CreateThreadWithStackSize")
SDL_GetThreadName(thread pointer #As("SDL_Thread *")) *sbyte #Foreign("SDL_GetThreadName")
SDL_ThreadID() ulong #Foreign("SDL_ThreadID")
SDL_GetThreadID(thread pointer #As("SDL_Thread *")) ulong #Foreign("SDL_GetThreadID")
SDL_SetThreadPriority(priority SDL_ThreadPriority #As("SDL_ThreadPriority")) int #Foreign("SDL_SetThreadPriority")
SDL_WaitThread(thread pointer #As("SDL_Thread *"), status *int) void #Foreign("SDL_WaitThread")
SDL_DetachThread(thread pointer #As("SDL_Thread *")) void #Foreign("SDL_DetachThread")
SDL_TLSCreate() uint #Foreign("SDL_TLSCreate")
SDL_TLSGet(id uint) pointer #Foreign("SDL_TLSGet")
SDL_TLSSet(id uint, value pointer, destructor pointer #As("void (*)(void *)")) int #Foreign("SDL_TLSSet")
FILE struct {
	_flags int
	_IO_read_ptr *sbyte
	_IO_read_end *sbyte
	_IO_read_base *sbyte
	_IO_write_base *sbyte
	_IO_write_ptr *sbyte
	_IO_write_end *sbyte
	_IO_buf_base *sbyte
	_IO_buf_end *sbyte
	_IO_save_base *sbyte
	_IO_backup_base *sbyte
	_IO_save_end *sbyte
	_markers pointer
	_chain *FILE
	_fileno int
	_flags2 int
	_old_offset long
	_cur_column ushort
	_vtable_offset sbyte
	_shortbuf_0 sbyte
	_lock pointer
	_offset long
	_codecvt pointer
	_wide_data pointer
	_freeres_list *FILE
	_freeres_buf pointer
	__pad5 ulong
	_mode int
	_unused2_0 sbyte
	_unused2_1 sbyte
	_unused2_2 sbyte
	_unused2_3 sbyte
	_unused2_4 sbyte
	_unused2_5 sbyte
	_unused2_6 sbyte
	_unused2_7 sbyte
	_unused2_8 sbyte
	_unused2_9 sbyte
	_unused2_10 sbyte
	_unused2_11 sbyte
	_unused2_12 sbyte
	_unused2_13 sbyte
	_unused2_14 sbyte
	_unused2_15 sbyte
	_unused2_16 sbyte
	_unused2_17 sbyte
	_unused2_18 sbyte
	_unused2_19 sbyte
}
SDL_RWops_Anonymous0_Variant0_Anonymous0 struct {
	autoclose SDL_bool
	fp *FILE
}
SDL_RWops_Anonymous0_Variant0 struct {
	stdio SDL_RWops_Anonymous0_Variant0_Anonymous0
}
SDL_RWops_Anonymous0_Variant1_Anonymous0 struct {
	base *byte
	here *byte
	stop *byte
}
SDL_RWops_Anonymous0_Variant1 struct {
	mem SDL_RWops_Anonymous0_Variant1_Anonymous0
}
SDL_RWops_Anonymous0_Variant2_Anonymous0 struct {
	data1 pointer
	data2 pointer
}
SDL_RWops_Anonymous0_Variant2 struct {
	unknown SDL_RWops_Anonymous0_Variant2_Anonymous0
}
SDL_RWops_Anonymous0 struct {
	padding_0 ulong
	padding_1 ulong
	padding_2 ulong
}
SDL_RWops struct {
	size pointer
	seek pointer
	read pointer
	write pointer
	close pointer
	type uint
	hidden SDL_RWops_Anonymous0
}
SDL_RWFromFile(file cstring, mode cstring) *SDL_RWops #As("SDL_RWops *") #Foreign("SDL_RWFromFile")
SDL_RWFromFP(fp *FILE #As("FILE *"), autoclose SDL_bool #As("SDL_bool")) *SDL_RWops #As("SDL_RWops *") #Foreign("SDL_RWFromFP")
SDL_RWFromMem(mem pointer, size int) *SDL_RWops #As("SDL_RWops *") #Foreign("SDL_RWFromMem")
SDL_RWFromConstMem(mem pointer, size int) *SDL_RWops #As("SDL_RWops *") #Foreign("SDL_RWFromConstMem")
SDL_AllocRW() *SDL_RWops #As("SDL_RWops *") #Foreign("SDL_AllocRW")
SDL_FreeRW(area *SDL_RWops #As("SDL_RWops *")) void #Foreign("SDL_FreeRW")
SDL_RWsize(context *SDL_RWops #As("SDL_RWops *")) long #Foreign("SDL_RWsize")
SDL_RWseek(context *SDL_RWops #As("SDL_RWops *"), offset long, whence int) long #Foreign("SDL_RWseek")
SDL_RWtell(context *SDL_RWops #As("SDL_RWops *")) long #Foreign("SDL_RWtell")
SDL_RWread(context *SDL_RWops #As("SDL_RWops *"), ptr pointer, size ulong, maxnum ulong) ulong #Foreign("SDL_RWread")
SDL_RWwrite(context *SDL_RWops #As("SDL_RWops *"), ptr pointer, size ulong, num ulong) ulong #Foreign("SDL_RWwrite")
SDL_RWclose(context *SDL_RWops #As("SDL_RWops *")) int #Foreign("SDL_RWclose")
SDL_LoadFile_RW(src *SDL_RWops #As("SDL_RWops *"), datasize *ulong, freesrc int) pointer #Foreign("SDL_LoadFile_RW")
SDL_LoadFile(file *sbyte, datasize *ulong) pointer #Foreign("SDL_LoadFile")
SDL_ReadU8(src *SDL_RWops #As("SDL_RWops *")) byte #Foreign("SDL_ReadU8")
SDL_ReadLE16(src *SDL_RWops #As("SDL_RWops *")) ushort #Foreign("SDL_ReadLE16")
SDL_ReadBE16(src *SDL_RWops #As("SDL_RWops *")) ushort #Foreign("SDL_ReadBE16")
SDL_ReadLE32(src *SDL_RWops #As("SDL_RWops *")) uint #Foreign("SDL_ReadLE32")
SDL_ReadBE32(src *SDL_RWops #As("SDL_RWops *")) uint #Foreign("SDL_ReadBE32")
SDL_ReadLE64(src *SDL_RWops #As("SDL_RWops *")) ulong #Foreign("SDL_ReadLE64")
SDL_ReadBE64(src *SDL_RWops #As("SDL_RWops *")) ulong #Foreign("SDL_ReadBE64")
SDL_WriteU8(dst *SDL_RWops #As("SDL_RWops *"), value byte) ulong #Foreign("SDL_WriteU8")
SDL_WriteLE16(dst *SDL_RWops #As("SDL_RWops *"), value ushort) ulong #Foreign("SDL_WriteLE16")
SDL_WriteBE16(dst *SDL_RWops #As("SDL_RWops *"), value ushort) ulong #Foreign("SDL_WriteBE16")
SDL_WriteLE32(dst *SDL_RWops #As("SDL_RWops *"), value uint) ulong #Foreign("SDL_WriteLE32")
SDL_WriteBE32(dst *SDL_RWops #As("SDL_RWops *"), value uint) ulong #Foreign("SDL_WriteBE32")
SDL_WriteLE64(dst *SDL_RWops #As("SDL_RWops *"), value ulong) ulong #Foreign("SDL_WriteLE64")
SDL_WriteBE64(dst *SDL_RWops #As("SDL_RWops *"), value ulong) ulong #Foreign("SDL_WriteBE64")
SDL_AudioSpec struct {
	freq int
	format ushort
	channels byte
	silence byte
	samples ushort
	padding ushort
	size uint
	callback pointer
	userdata pointer
}
SDL_AudioCVT struct {
	needed_0 byte
	needed_1 byte
	needed_2 byte
	needed_3 byte
	src_format_0 byte
	src_format_1 byte
	dst_format_0 byte
	dst_format_1 byte
	rate_incr_0 byte
	rate_incr_1 byte
	rate_incr_2 byte
	rate_incr_3 byte
	rate_incr_4 byte
	rate_incr_5 byte
	rate_incr_6 byte
	rate_incr_7 byte
	buf_0 byte
	buf_1 byte
	buf_2 byte
	buf_3 byte
	buf_4 byte
	buf_5 byte
	buf_6 byte
	buf_7 byte
	len_0 byte
	len_1 byte
	len_2 byte
	len_3 byte
	len_cvt_0 byte
	len_cvt_1 byte
	len_cvt_2 byte
	len_cvt_3 byte
	len_mult_0 byte
	len_mult_1 byte
	len_mult_2 byte
	len_mult_3 byte
	len_ratio_0 byte
	len_ratio_1 byte
	len_ratio_2 byte
	len_ratio_3 byte
	len_ratio_4 byte
	len_ratio_5 byte
	len_ratio_6 byte
	len_ratio_7 byte
	filters_0 byte
	filters_1 byte
	filters_2 byte
	filters_3 byte
	filters_4 byte
	filters_5 byte
	filters_6 byte
	filters_7 byte
	filters_8 byte
	filters_9 byte
	filters_10 byte
	filters_11 byte
	filters_12 byte
	filters_13 byte
	filters_14 byte
	filters_15 byte
	filters_16 byte
	filters_17 byte
	filters_18 byte
	filters_19 byte
	filters_20 byte
	filters_21 byte
	filters_22 byte
	filters_23 byte
	filters_24 byte
	filters_25 byte
	filters_26 byte
	filters_27 byte
	filters_28 byte
	filters_29 byte
	filters_30 byte
	filters_31 byte
	filters_32 byte
	filters_33 byte
	filters_34 byte
	filters_35 byte
	filters_36 byte
	filters_37 byte
	filters_38 byte
	filters_39 byte
	filters_40 byte
	filters_41 byte
	filters_42 byte
	filters_43 byte
	filters_44 byte
	filters_45 byte
	filters_46 byte
	filters_47 byte
	filters_48 byte
	filters_49 byte
	filters_50 byte
	filters_51 byte
	filters_52 byte
	filters_53 byte
	filters_54 byte
	filters_55 byte
	filters_56 byte
	filters_57 byte
	filters_58 byte
	filters_59 byte
	filters_60 byte
	filters_61 byte
	filters_62 byte
	filters_63 byte
	filters_64 byte
	filters_65 byte
	filters_66 byte
	filters_67 byte
	filters_68 byte
	filters_69 byte
	filters_70 byte
	filters_71 byte
	filters_72 byte
	filters_73 byte
	filters_74 byte
	filters_75 byte
	filters_76 byte
	filters_77 byte
	filters_78 byte
	filters_79 byte
	filter_index_0 byte
	filter_index_1 byte
	filter_index_2 byte
	filter_index_3 byte
}
SDL_GetNumAudioDrivers() int #Foreign("SDL_GetNumAudioDrivers")
SDL_GetAudioDriver(index int) *sbyte #Foreign("SDL_GetAudioDriver")
SDL_AudioInit(driver_name *sbyte) int #Foreign("SDL_AudioInit")
SDL_AudioQuit() void #Foreign("SDL_AudioQuit")
SDL_GetCurrentAudioDriver() *sbyte #Foreign("SDL_GetCurrentAudioDriver")
SDL_OpenAudio(desired *SDL_AudioSpec #As("SDL_AudioSpec *"), obtained *SDL_AudioSpec #As("SDL_AudioSpec *")) int #Foreign("SDL_OpenAudio")
SDL_GetNumAudioDevices(iscapture int) int #Foreign("SDL_GetNumAudioDevices")
SDL_GetAudioDeviceName(index int, iscapture int) *sbyte #Foreign("SDL_GetAudioDeviceName")
SDL_OpenAudioDevice(device *sbyte, iscapture int, desired *SDL_AudioSpec #As("const SDL_AudioSpec *"), obtained *SDL_AudioSpec #As("SDL_AudioSpec *"), allowed_changes int) uint #Foreign("SDL_OpenAudioDevice")
SDL_AudioStatus enum #Flags {
	SDL_AUDIO_STOPPED = 0_u
	SDL_AUDIO_PLAYING = 1_u
	SDL_AUDIO_PAUSED = 2_u
}
SDL_GetAudioStatus() SDL_AudioStatus #As("SDL_AudioStatus") #Foreign("SDL_GetAudioStatus")
SDL_GetAudioDeviceStatus(dev uint) SDL_AudioStatus #As("SDL_AudioStatus") #Foreign("SDL_GetAudioDeviceStatus")
SDL_PauseAudio(pause_on int) void #Foreign("SDL_PauseAudio")
SDL_PauseAudioDevice(dev uint, pause_on int) void #Foreign("SDL_PauseAudioDevice")
SDL_LoadWAV_RW(src *SDL_RWops #As("SDL_RWops *"), freesrc int, spec *SDL_AudioSpec #As("SDL_AudioSpec *"), audio_buf **byte, audio_len *uint) *SDL_AudioSpec #As("SDL_AudioSpec *") #Foreign("SDL_LoadWAV_RW")
SDL_FreeWAV(audio_buf *byte) void #Foreign("SDL_FreeWAV")
SDL_BuildAudioCVT(cvt *SDL_AudioCVT #As("SDL_AudioCVT *"), src_format ushort, src_channels byte, src_rate int, dst_format ushort, dst_channels byte, dst_rate int) int #Foreign("SDL_BuildAudioCVT")
SDL_ConvertAudio(cvt *SDL_AudioCVT #As("SDL_AudioCVT *")) int #Foreign("SDL_ConvertAudio")
SDL_NewAudioStream(src_format ushort, src_channels byte, src_rate int, dst_format ushort, dst_channels byte, dst_rate int) pointer #As("SDL_AudioStream *") #Foreign("SDL_NewAudioStream")
SDL_AudioStreamPut(stream pointer #As("SDL_AudioStream *"), buf pointer, len int) int #Foreign("SDL_AudioStreamPut")
SDL_AudioStreamGet(stream pointer #As("SDL_AudioStream *"), buf pointer, len int) int #Foreign("SDL_AudioStreamGet")
SDL_AudioStreamAvailable(stream pointer #As("SDL_AudioStream *")) int #Foreign("SDL_AudioStreamAvailable")
SDL_AudioStreamFlush(stream pointer #As("SDL_AudioStream *")) int #Foreign("SDL_AudioStreamFlush")
SDL_AudioStreamClear(stream pointer #As("SDL_AudioStream *")) void #Foreign("SDL_AudioStreamClear")
SDL_FreeAudioStream(stream pointer #As("SDL_AudioStream *")) void #Foreign("SDL_FreeAudioStream")
SDL_MixAudio(dst *byte, src *byte, len uint, volume int) void #Foreign("SDL_MixAudio")
SDL_MixAudioFormat(dst *byte, src *byte, format ushort, len uint, volume int) void #Foreign("SDL_MixAudioFormat")
SDL_QueueAudio(dev uint, data pointer, len uint) int #Foreign("SDL_QueueAudio")
SDL_DequeueAudio(dev uint, data pointer, len uint) uint #Foreign("SDL_DequeueAudio")
SDL_GetQueuedAudioSize(dev uint) uint #Foreign("SDL_GetQueuedAudioSize")
SDL_ClearQueuedAudio(dev uint) void #Foreign("SDL_ClearQueuedAudio")
SDL_LockAudio() void #Foreign("SDL_LockAudio")
SDL_LockAudioDevice(dev uint) void #Foreign("SDL_LockAudioDevice")
SDL_UnlockAudio() void #Foreign("SDL_UnlockAudio")
SDL_UnlockAudioDevice(dev uint) void #Foreign("SDL_UnlockAudioDevice")
SDL_CloseAudio() void #Foreign("SDL_CloseAudio")
SDL_CloseAudioDevice(dev uint) void #Foreign("SDL_CloseAudioDevice")
SDL_SetClipboardText(text cstring) int #Foreign("SDL_SetClipboardText")
SDL_GetClipboardText() cstring #Foreign("SDL_GetClipboardText")
SDL_HasClipboardText() SDL_bool #As("SDL_bool") #Foreign("SDL_HasClipboardText")
SDL_GetCPUCount() int #Foreign("SDL_GetCPUCount")
SDL_GetCPUCacheLineSize() int #Foreign("SDL_GetCPUCacheLineSize")
SDL_HasRDTSC() SDL_bool #As("SDL_bool") #Foreign("SDL_HasRDTSC")
SDL_HasAltiVec() SDL_bool #As("SDL_bool") #Foreign("SDL_HasAltiVec")
SDL_HasMMX() SDL_bool #As("SDL_bool") #Foreign("SDL_HasMMX")
SDL_Has3DNow() SDL_bool #As("SDL_bool") #Foreign("SDL_Has3DNow")
SDL_HasSSE() SDL_bool #As("SDL_bool") #Foreign("SDL_HasSSE")
SDL_HasSSE2() SDL_bool #As("SDL_bool") #Foreign("SDL_HasSSE2")
SDL_HasSSE3() SDL_bool #As("SDL_bool") #Foreign("SDL_HasSSE3")
SDL_HasSSE41() SDL_bool #As("SDL_bool") #Foreign("SDL_HasSSE41")
SDL_HasSSE42() SDL_bool #As("SDL_bool") #Foreign("SDL_HasSSE42")
SDL_HasAVX() SDL_bool #As("SDL_bool") #Foreign("SDL_HasAVX")
SDL_HasAVX2() SDL_bool #As("SDL_bool") #Foreign("SDL_HasAVX2")
SDL_HasAVX512F() SDL_bool #As("SDL_bool") #Foreign("SDL_HasAVX512F")
SDL_HasARMSIMD() SDL_bool #As("SDL_bool") #Foreign("SDL_HasARMSIMD")
SDL_HasNEON() SDL_bool #As("SDL_bool") #Foreign("SDL_HasNEON")
SDL_GetSystemRAM() int #Foreign("SDL_GetSystemRAM")
SDL_SIMDGetAlignment() ulong #Foreign("SDL_SIMDGetAlignment")
SDL_SIMDAlloc(len ulong) pointer #Foreign("SDL_SIMDAlloc")
SDL_SIMDFree(ptr pointer) void #Foreign("SDL_SIMDFree")
SDL_PixelType enum #Flags {
	SDL_PIXELTYPE_UNKNOWN = 0_u
	SDL_PIXELTYPE_INDEX1 = 1_u
	SDL_PIXELTYPE_INDEX4 = 2_u
	SDL_PIXELTYPE_INDEX8 = 3_u
	SDL_PIXELTYPE_PACKED8 = 4_u
	SDL_PIXELTYPE_PACKED16 = 5_u
	SDL_PIXELTYPE_PACKED32 = 6_u
	SDL_PIXELTYPE_ARRAYU8 = 7_u
	SDL_PIXELTYPE_ARRAYU16 = 8_u
	SDL_PIXELTYPE_ARRAYU32 = 9_u
	SDL_PIXELTYPE_ARRAYF16 = 10_u
	SDL_PIXELTYPE_ARRAYF32 = 11_u
}
SDL_BitmapOrder enum #Flags {
	SDL_BITMAPORDER_NONE = 0_u
	SDL_BITMAPORDER_4321 = 1_u
	SDL_BITMAPORDER_1234 = 2_u
}
SDL_PackedOrder enum #Flags {
	SDL_PACKEDORDER_NONE = 0_u
	SDL_PACKEDORDER_XRGB = 1_u
	SDL_PACKEDORDER_RGBX = 2_u
	SDL_PACKEDORDER_ARGB = 3_u
	SDL_PACKEDORDER_RGBA = 4_u
	SDL_PACKEDORDER_XBGR = 5_u
	SDL_PACKEDORDER_BGRX = 6_u
	SDL_PACKEDORDER_ABGR = 7_u
	SDL_PACKEDORDER_BGRA = 8_u
}
SDL_ArrayOrder enum #Flags {
	SDL_ARRAYORDER_NONE = 0_u
	SDL_ARRAYORDER_RGB = 1_u
	SDL_ARRAYORDER_RGBA = 2_u
	SDL_ARRAYORDER_ARGB = 3_u
	SDL_ARRAYORDER_BGR = 4_u
	SDL_ARRAYORDER_BGRA = 5_u
	SDL_ARRAYORDER_ABGR = 6_u
}
SDL_PackedLayout enum #Flags {
	SDL_PACKEDLAYOUT_NONE = 0_u
	SDL_PACKEDLAYOUT_332 = 1_u
	SDL_PACKEDLAYOUT_4444 = 2_u
	SDL_PACKEDLAYOUT_1555 = 3_u
	SDL_PACKEDLAYOUT_5551 = 4_u
	SDL_PACKEDLAYOUT_565 = 5_u
	SDL_PACKEDLAYOUT_8888 = 6_u
	SDL_PACKEDLAYOUT_2101010 = 7_u
	SDL_PACKEDLAYOUT_1010102 = 8_u
}
SDL_PixelFormatEnum enum #Flags {
	SDL_PIXELFORMAT_UNKNOWN = 0_u
	SDL_PIXELFORMAT_INDEX1LSB = 286261504_u
	SDL_PIXELFORMAT_INDEX1MSB = 287310080_u
	SDL_PIXELFORMAT_INDEX4LSB = 303039488_u
	SDL_PIXELFORMAT_INDEX4MSB = 304088064_u
	SDL_PIXELFORMAT_INDEX8 = 318769153_u
	SDL_PIXELFORMAT_RGB332 = 336660481_u
	SDL_PIXELFORMAT_RGB444 = 353504258_u
	SDL_PIXELFORMAT_BGR444 = 357698562_u
	SDL_PIXELFORMAT_RGB555 = 353570562_u
	SDL_PIXELFORMAT_BGR555 = 357764866_u
	SDL_PIXELFORMAT_ARGB4444 = 355602434_u
	SDL_PIXELFORMAT_RGBA4444 = 356651010_u
	SDL_PIXELFORMAT_ABGR4444 = 359796738_u
	SDL_PIXELFORMAT_BGRA4444 = 360845314_u
	SDL_PIXELFORMAT_ARGB1555 = 355667970_u
	SDL_PIXELFORMAT_RGBA5551 = 356782082_u
	SDL_PIXELFORMAT_ABGR1555 = 359862274_u
	SDL_PIXELFORMAT_BGRA5551 = 360976386_u
	SDL_PIXELFORMAT_RGB565 = 353701890_u
	SDL_PIXELFORMAT_BGR565 = 357896194_u
	SDL_PIXELFORMAT_RGB24 = 386930691_u
	SDL_PIXELFORMAT_BGR24 = 390076419_u
	SDL_PIXELFORMAT_RGB888 = 370546692_u
	SDL_PIXELFORMAT_RGBX8888 = 371595268_u
	SDL_PIXELFORMAT_BGR888 = 374740996_u
	SDL_PIXELFORMAT_BGRX8888 = 375789572_u
	SDL_PIXELFORMAT_ARGB8888 = 372645892_u
	SDL_PIXELFORMAT_RGBA8888 = 373694468_u
	SDL_PIXELFORMAT_ABGR8888 = 376840196_u
	SDL_PIXELFORMAT_BGRA8888 = 377888772_u
	SDL_PIXELFORMAT_ARGB2101010 = 372711428_u
	SDL_PIXELFORMAT_RGBA32 = 376840196_u
	SDL_PIXELFORMAT_ARGB32 = 377888772_u
	SDL_PIXELFORMAT_BGRA32 = 372645892_u
	SDL_PIXELFORMAT_ABGR32 = 373694468_u
	SDL_PIXELFORMAT_YV12 = 842094169_u
	SDL_PIXELFORMAT_IYUV = 1448433993_u
	SDL_PIXELFORMAT_YUY2 = 844715353_u
	SDL_PIXELFORMAT_UYVY = 1498831189_u
	SDL_PIXELFORMAT_YVYU = 1431918169_u
	SDL_PIXELFORMAT_NV12 = 842094158_u
	SDL_PIXELFORMAT_NV21 = 825382478_u
	SDL_PIXELFORMAT_EXTERNAL_OES = 542328143_u
}
SDL_Color struct {
	r byte
	g byte
	b byte
	a byte
}
SDL_Palette struct {
	ncolors int
	colors *SDL_Color
	version uint
	refcount int
}
SDL_PixelFormat struct {
	format uint
	palette *SDL_Palette
	BitsPerPixel byte
	BytesPerPixel byte
	padding_0 byte
	padding_1 byte
	Rmask uint
	Gmask uint
	Bmask uint
	Amask uint
	Rloss byte
	Gloss byte
	Bloss byte
	Aloss byte
	Rshift byte
	Gshift byte
	Bshift byte
	Ashift byte
	refcount int
	next *SDL_PixelFormat
}
SDL_GetPixelFormatName(format uint) *sbyte #Foreign("SDL_GetPixelFormatName")
SDL_PixelFormatEnumToMasks(format uint, bpp *int, Rmask *uint, Gmask *uint, Bmask *uint, Amask *uint) SDL_bool #As("SDL_bool") #Foreign("SDL_PixelFormatEnumToMasks")
SDL_MasksToPixelFormatEnum(bpp int, Rmask uint, Gmask uint, Bmask uint, Amask uint) uint #Foreign("SDL_MasksToPixelFormatEnum")
SDL_AllocFormat(pixel_format uint) *SDL_PixelFormat #As("SDL_PixelFormat *") #Foreign("SDL_AllocFormat")
SDL_FreeFormat(format *SDL_PixelFormat #As("SDL_PixelFormat *")) void #Foreign("SDL_FreeFormat")
SDL_AllocPalette(ncolors int) *SDL_Palette #As("SDL_Palette *") #Foreign("SDL_AllocPalette")
SDL_SetPixelFormatPalette(format *SDL_PixelFormat #As("SDL_PixelFormat *"), palette *SDL_Palette #As("SDL_Palette *")) int #Foreign("SDL_SetPixelFormatPalette")
SDL_SetPaletteColors(palette *SDL_Palette #As("SDL_Palette *"), colors *SDL_Color #As("const SDL_Color *"), firstcolor int, ncolors int) int #Foreign("SDL_SetPaletteColors")
SDL_FreePalette(palette *SDL_Palette #As("SDL_Palette *")) void #Foreign("SDL_FreePalette")
SDL_MapRGB(format *SDL_PixelFormat #As("const SDL_PixelFormat *"), r byte, g byte, b byte) uint #Foreign("SDL_MapRGB")
SDL_MapRGBA(format *SDL_PixelFormat #As("const SDL_PixelFormat *"), r byte, g byte, b byte, a byte) uint #Foreign("SDL_MapRGBA")
SDL_GetRGB(pixel uint, format *SDL_PixelFormat #As("const SDL_PixelFormat *"), r *byte, g *byte, b *byte) void #Foreign("SDL_GetRGB")
SDL_GetRGBA(pixel uint, format *SDL_PixelFormat #As("const SDL_PixelFormat *"), r *byte, g *byte, b *byte, a *byte) void #Foreign("SDL_GetRGBA")
SDL_CalculateGammaRamp(gamma float, ramp *ushort) void #Foreign("SDL_CalculateGammaRamp")
SDL_Point struct {
	x int
	y int
}
SDL_FPoint struct {
	x float
	y float
}
SDL_Rect struct {
	x int
	y int
	w int
	h int
}
SDL_FRect struct {
	x float
	y float
	w float
	h float
}
SDL_PointInRect(p *SDL_Point #As("const SDL_Point *"), r *SDL_Rect #As("const SDL_Rect *")) SDL_bool #As("SDL_bool") #Foreign("SDL_PointInRect")
SDL_RectEmpty(r *SDL_Rect #As("const SDL_Rect *")) SDL_bool #As("SDL_bool") #Foreign("SDL_RectEmpty")
SDL_RectEquals(a *SDL_Rect #As("const SDL_Rect *"), b *SDL_Rect #As("const SDL_Rect *")) SDL_bool #As("SDL_bool") #Foreign("SDL_RectEquals")
SDL_HasIntersection(A *SDL_Rect #As("const SDL_Rect *"), B *SDL_Rect #As("const SDL_Rect *")) SDL_bool #As("SDL_bool") #Foreign("SDL_HasIntersection")
SDL_IntersectRect(A *SDL_Rect #As("const SDL_Rect *"), B *SDL_Rect #As("const SDL_Rect *"), result *SDL_Rect #As("SDL_Rect *")) SDL_bool #As("SDL_bool") #Foreign("SDL_IntersectRect")
SDL_UnionRect(A *SDL_Rect #As("const SDL_Rect *"), B *SDL_Rect #As("const SDL_Rect *"), result *SDL_Rect #As("SDL_Rect *")) void #Foreign("SDL_UnionRect")
SDL_EnclosePoints(points *SDL_Point #As("const SDL_Point *"), count int, clip *SDL_Rect #As("const SDL_Rect *"), result *SDL_Rect #As("SDL_Rect *")) SDL_bool #As("SDL_bool") #Foreign("SDL_EnclosePoints")
SDL_IntersectRectAndLine(rect *SDL_Rect #As("const SDL_Rect *"), X1 *int, Y1 *int, X2 *int, Y2 *int) SDL_bool #As("SDL_bool") #Foreign("SDL_IntersectRectAndLine")
SDL_BlendMode enum #Flags {
	SDL_BLENDMODE_NONE = 0_u
	SDL_BLENDMODE_BLEND = 1_u
	SDL_BLENDMODE_ADD = 2_u
	SDL_BLENDMODE_MOD = 4_u
	SDL_BLENDMODE_MUL = 8_u
	SDL_BLENDMODE_INVALID = 2147483647_u
}
SDL_BlendOperation enum #Flags {
	SDL_BLENDOPERATION_ADD = 1_u
	SDL_BLENDOPERATION_SUBTRACT = 2_u
	SDL_BLENDOPERATION_REV_SUBTRACT = 3_u
	SDL_BLENDOPERATION_MINIMUM = 4_u
	SDL_BLENDOPERATION_MAXIMUM = 5_u
}
SDL_BlendFactor enum #Flags {
	SDL_BLENDFACTOR_ZERO = 1_u
	SDL_BLENDFACTOR_ONE = 2_u
	SDL_BLENDFACTOR_SRC_COLOR = 3_u
	SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4_u
	SDL_BLENDFACTOR_SRC_ALPHA = 5_u
	SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6_u
	SDL_BLENDFACTOR_DST_COLOR = 7_u
	SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8_u
	SDL_BLENDFACTOR_DST_ALPHA = 9_u
	SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10_u
}
SDL_ComposeCustomBlendMode(srcColorFactor SDL_BlendFactor #As("SDL_BlendFactor"), dstColorFactor SDL_BlendFactor #As("SDL_BlendFactor"), colorOperation SDL_BlendOperation #As("SDL_BlendOperation"), srcAlphaFactor SDL_BlendFactor #As("SDL_BlendFactor"), dstAlphaFactor SDL_BlendFactor #As("SDL_BlendFactor"), alphaOperation SDL_BlendOperation #As("SDL_BlendOperation")) SDL_BlendMode #As("SDL_BlendMode") #Foreign("SDL_ComposeCustomBlendMode")
SDL_Surface struct {
	flags uint
	format *SDL_PixelFormat
	w int
	h int
	pitch int
	pixels pointer
	userdata pointer
	locked int
	lock_data pointer
	clip_rect SDL_Rect
	map pointer
	refcount int
}
SDL_YUV_CONVERSION_MODE enum #Flags {
	SDL_YUV_CONVERSION_JPEG = 0_u
	SDL_YUV_CONVERSION_BT601 = 1_u
	SDL_YUV_CONVERSION_BT709 = 2_u
	SDL_YUV_CONVERSION_AUTOMATIC = 3_u
}
SDL_CreateRGBSurface(flags uint, width int, height int, depth int, Rmask uint, Gmask uint, Bmask uint, Amask uint) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_CreateRGBSurface")
SDL_CreateRGBSurfaceWithFormat(flags uint, width int, height int, depth int, format uint) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_CreateRGBSurfaceWithFormat")
SDL_CreateRGBSurfaceFrom(pixels pointer, width int, height int, depth int, pitch int, Rmask uint, Gmask uint, Bmask uint, Amask uint) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_CreateRGBSurfaceFrom")
SDL_CreateRGBSurfaceWithFormatFrom(pixels pointer, width int, height int, depth int, pitch int, format uint) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_CreateRGBSurfaceWithFormatFrom")
SDL_FreeSurface(surface *SDL_Surface #As("SDL_Surface *")) void #Foreign("SDL_FreeSurface")
SDL_SetSurfacePalette(surface *SDL_Surface #As("SDL_Surface *"), palette *SDL_Palette #As("SDL_Palette *")) int #Foreign("SDL_SetSurfacePalette")
SDL_LockSurface(surface *SDL_Surface #As("SDL_Surface *")) int #Foreign("SDL_LockSurface")
SDL_UnlockSurface(surface *SDL_Surface #As("SDL_Surface *")) void #Foreign("SDL_UnlockSurface")
SDL_LoadBMP_RW(src *SDL_RWops #As("SDL_RWops *"), freesrc int) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_LoadBMP_RW")
SDL_SaveBMP_RW(surface *SDL_Surface #As("SDL_Surface *"), dst *SDL_RWops #As("SDL_RWops *"), freedst int) int #Foreign("SDL_SaveBMP_RW")
SDL_SetSurfaceRLE(surface *SDL_Surface #As("SDL_Surface *"), flag int) int #Foreign("SDL_SetSurfaceRLE")
SDL_SetColorKey(surface *SDL_Surface #As("SDL_Surface *"), flag int, key uint) int #Foreign("SDL_SetColorKey")
SDL_HasColorKey(surface *SDL_Surface #As("SDL_Surface *")) SDL_bool #As("SDL_bool") #Foreign("SDL_HasColorKey")
SDL_GetColorKey(surface *SDL_Surface #As("SDL_Surface *"), key *uint) int #Foreign("SDL_GetColorKey")
SDL_SetSurfaceColorMod(surface *SDL_Surface #As("SDL_Surface *"), r byte, g byte, b byte) int #Foreign("SDL_SetSurfaceColorMod")
SDL_GetSurfaceColorMod(surface *SDL_Surface #As("SDL_Surface *"), r *byte, g *byte, b *byte) int #Foreign("SDL_GetSurfaceColorMod")
SDL_SetSurfaceAlphaMod(surface *SDL_Surface #As("SDL_Surface *"), alpha byte) int #Foreign("SDL_SetSurfaceAlphaMod")
SDL_GetSurfaceAlphaMod(surface *SDL_Surface #As("SDL_Surface *"), alpha *byte) int #Foreign("SDL_GetSurfaceAlphaMod")
SDL_SetSurfaceBlendMode(surface *SDL_Surface #As("SDL_Surface *"), blendMode SDL_BlendMode #As("SDL_BlendMode")) int #Foreign("SDL_SetSurfaceBlendMode")
SDL_GetSurfaceBlendMode(surface *SDL_Surface #As("SDL_Surface *"), blendMode *SDL_BlendMode #As("SDL_BlendMode *")) int #Foreign("SDL_GetSurfaceBlendMode")
SDL_SetClipRect(surface *SDL_Surface #As("SDL_Surface *"), rect *SDL_Rect #As("const SDL_Rect *")) SDL_bool #As("SDL_bool") #Foreign("SDL_SetClipRect")
SDL_GetClipRect(surface *SDL_Surface #As("SDL_Surface *"), rect *SDL_Rect #As("SDL_Rect *")) void #Foreign("SDL_GetClipRect")
SDL_DuplicateSurface(surface *SDL_Surface #As("SDL_Surface *")) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_DuplicateSurface")
SDL_ConvertSurface(src *SDL_Surface #As("SDL_Surface *"), fmt *SDL_PixelFormat #As("const SDL_PixelFormat *"), flags uint) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_ConvertSurface")
SDL_ConvertSurfaceFormat(src *SDL_Surface #As("SDL_Surface *"), pixel_format uint, flags uint) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_ConvertSurfaceFormat")
SDL_ConvertPixels(width int, height int, src_format uint, src pointer, src_pitch int, dst_format uint, dst pointer, dst_pitch int) int #Foreign("SDL_ConvertPixels")
SDL_FillRect(dst *SDL_Surface #As("SDL_Surface *"), rect *SDL_Rect #As("const SDL_Rect *"), color uint) int #Foreign("SDL_FillRect")
SDL_FillRects(dst *SDL_Surface #As("SDL_Surface *"), rects *SDL_Rect #As("const SDL_Rect *"), count int, color uint) int #Foreign("SDL_FillRects")
SDL_UpperBlit(src *SDL_Surface #As("SDL_Surface *"), srcrect *SDL_Rect #As("const SDL_Rect *"), dst *SDL_Surface #As("SDL_Surface *"), dstrect *SDL_Rect #As("SDL_Rect *")) int #Foreign("SDL_UpperBlit")
SDL_LowerBlit(src *SDL_Surface #As("SDL_Surface *"), srcrect *SDL_Rect #As("SDL_Rect *"), dst *SDL_Surface #As("SDL_Surface *"), dstrect *SDL_Rect #As("SDL_Rect *")) int #Foreign("SDL_LowerBlit")
SDL_SoftStretch(src *SDL_Surface #As("SDL_Surface *"), srcrect *SDL_Rect #As("const SDL_Rect *"), dst *SDL_Surface #As("SDL_Surface *"), dstrect *SDL_Rect #As("const SDL_Rect *")) int #Foreign("SDL_SoftStretch")
SDL_UpperBlitScaled(src *SDL_Surface #As("SDL_Surface *"), srcrect *SDL_Rect #As("const SDL_Rect *"), dst *SDL_Surface #As("SDL_Surface *"), dstrect *SDL_Rect #As("SDL_Rect *")) int #Foreign("SDL_UpperBlitScaled")
SDL_LowerBlitScaled(src *SDL_Surface #As("SDL_Surface *"), srcrect *SDL_Rect #As("SDL_Rect *"), dst *SDL_Surface #As("SDL_Surface *"), dstrect *SDL_Rect #As("SDL_Rect *")) int #Foreign("SDL_LowerBlitScaled")
SDL_SetYUVConversionMode(mode SDL_YUV_CONVERSION_MODE #As("SDL_YUV_CONVERSION_MODE")) void #Foreign("SDL_SetYUVConversionMode")
SDL_GetYUVConversionMode() SDL_YUV_CONVERSION_MODE #As("SDL_YUV_CONVERSION_MODE") #Foreign("SDL_GetYUVConversionMode")
SDL_GetYUVConversionModeForResolution(width int, height int) SDL_YUV_CONVERSION_MODE #As("SDL_YUV_CONVERSION_MODE") #Foreign("SDL_GetYUVConversionModeForResolution")
SDL_DisplayMode struct {
	format uint
	w int
	h int
	refresh_rate int
	driverdata pointer
}
:SDL_WINDOW_FULLSCREEN uint = 1_u
:SDL_WINDOW_OPENGL uint = 2_u
:SDL_WINDOW_SHOWN uint = 4_u
:SDL_WINDOW_HIDDEN uint = 8_u
:SDL_WINDOW_BORDERLESS uint = 16_u
:SDL_WINDOW_RESIZABLE uint = 32_u
:SDL_WINDOW_MINIMIZED uint = 64_u
:SDL_WINDOW_MAXIMIZED uint = 128_u
:SDL_WINDOW_INPUT_GRABBED uint = 256_u
:SDL_WINDOW_INPUT_FOCUS uint = 512_u
:SDL_WINDOW_MOUSE_FOCUS uint = 1024_u
:SDL_WINDOW_FULLSCREEN_DESKTOP uint = 4097_u
:SDL_WINDOW_FOREIGN uint = 2048_u
:SDL_WINDOW_ALLOW_HIGHDPI uint = 8192_u
:SDL_WINDOW_MOUSE_CAPTURE uint = 16384_u
:SDL_WINDOW_ALWAYS_ON_TOP uint = 32768_u
:SDL_WINDOW_SKIP_TASKBAR uint = 65536_u
:SDL_WINDOW_UTILITY uint = 131072_u
:SDL_WINDOW_TOOLTIP uint = 262144_u
:SDL_WINDOW_POPUP_MENU uint = 524288_u
:SDL_WINDOW_VULKAN uint = 268435456_u
SDL_WindowFlags enum #Flags {
	SDL_WINDOW_FULLSCREEN = 1_u
	SDL_WINDOW_OPENGL = 2_u
	SDL_WINDOW_SHOWN = 4_u
	SDL_WINDOW_HIDDEN = 8_u
	SDL_WINDOW_BORDERLESS = 16_u
	SDL_WINDOW_RESIZABLE = 32_u
	SDL_WINDOW_MINIMIZED = 64_u
	SDL_WINDOW_MAXIMIZED = 128_u
	SDL_WINDOW_INPUT_GRABBED = 256_u
	SDL_WINDOW_INPUT_FOCUS = 512_u
	SDL_WINDOW_MOUSE_FOCUS = 1024_u
	SDL_WINDOW_FULLSCREEN_DESKTOP = 4097_u
	SDL_WINDOW_FOREIGN = 2048_u
	SDL_WINDOW_ALLOW_HIGHDPI = 8192_u
	SDL_WINDOW_MOUSE_CAPTURE = 16384_u
	SDL_WINDOW_ALWAYS_ON_TOP = 32768_u
	SDL_WINDOW_SKIP_TASKBAR = 65536_u
	SDL_WINDOW_UTILITY = 131072_u
	SDL_WINDOW_TOOLTIP = 262144_u
	SDL_WINDOW_POPUP_MENU = 524288_u
	SDL_WINDOW_VULKAN = 268435456_u
}
SDL_WindowEventID enum #Flags {
	SDL_WINDOWEVENT_NONE = 0_u
	SDL_WINDOWEVENT_SHOWN = 1_u
	SDL_WINDOWEVENT_HIDDEN = 2_u
	SDL_WINDOWEVENT_EXPOSED = 3_u
	SDL_WINDOWEVENT_MOVED = 4_u
	SDL_WINDOWEVENT_RESIZED = 5_u
	SDL_WINDOWEVENT_SIZE_CHANGED = 6_u
	SDL_WINDOWEVENT_MINIMIZED = 7_u
	SDL_WINDOWEVENT_MAXIMIZED = 8_u
	SDL_WINDOWEVENT_RESTORED = 9_u
	SDL_WINDOWEVENT_ENTER = 10_u
	SDL_WINDOWEVENT_LEAVE = 11_u
	SDL_WINDOWEVENT_FOCUS_GAINED = 12_u
	SDL_WINDOWEVENT_FOCUS_LOST = 13_u
	SDL_WINDOWEVENT_CLOSE = 14_u
	SDL_WINDOWEVENT_TAKE_FOCUS = 15_u
	SDL_WINDOWEVENT_HIT_TEST = 16_u
}
SDL_DisplayEventID enum #Flags {
	SDL_DISPLAYEVENT_NONE = 0_u
	SDL_DISPLAYEVENT_ORIENTATION = 1_u
}
SDL_DisplayOrientation enum #Flags {
	SDL_ORIENTATION_UNKNOWN = 0_u
	SDL_ORIENTATION_LANDSCAPE = 1_u
	SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2_u
	SDL_ORIENTATION_PORTRAIT = 3_u
	SDL_ORIENTATION_PORTRAIT_FLIPPED = 4_u
}
SDL_GLattr enum #Flags {
	SDL_GL_RED_SIZE = 0_u
	SDL_GL_GREEN_SIZE = 1_u
	SDL_GL_BLUE_SIZE = 2_u
	SDL_GL_ALPHA_SIZE = 3_u
	SDL_GL_BUFFER_SIZE = 4_u
	SDL_GL_DOUBLEBUFFER = 5_u
	SDL_GL_DEPTH_SIZE = 6_u
	SDL_GL_STENCIL_SIZE = 7_u
	SDL_GL_ACCUM_RED_SIZE = 8_u
	SDL_GL_ACCUM_GREEN_SIZE = 9_u
	SDL_GL_ACCUM_BLUE_SIZE = 10_u
	SDL_GL_ACCUM_ALPHA_SIZE = 11_u
	SDL_GL_STEREO = 12_u
	SDL_GL_MULTISAMPLEBUFFERS = 13_u
	SDL_GL_MULTISAMPLESAMPLES = 14_u
	SDL_GL_ACCELERATED_VISUAL = 15_u
	SDL_GL_RETAINED_BACKING = 16_u
	SDL_GL_CONTEXT_MAJOR_VERSION = 17_u
	SDL_GL_CONTEXT_MINOR_VERSION = 18_u
	SDL_GL_CONTEXT_EGL = 19_u
	SDL_GL_CONTEXT_FLAGS = 20_u
	SDL_GL_CONTEXT_PROFILE_MASK = 21_u
	SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22_u
	SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23_u
	SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24_u
	SDL_GL_CONTEXT_RESET_NOTIFICATION = 25_u
	SDL_GL_CONTEXT_NO_ERROR = 26_u
}
SDL_GLprofile enum #Flags {
	SDL_GL_CONTEXT_PROFILE_CORE = 1_u
	SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2_u
	SDL_GL_CONTEXT_PROFILE_ES = 4_u
}
SDL_GLcontextFlag enum #Flags {
	SDL_GL_CONTEXT_DEBUG_FLAG = 1_u
	SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2_u
	SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4_u
	SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8_u
}
SDL_GLcontextReleaseFlag enum #Flags {
	SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0_u
	SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1_u
}
SDL_GLContextResetNotification enum #Flags {
	SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0_u
	SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1_u
}
SDL_GetNumVideoDrivers() int #Foreign("SDL_GetNumVideoDrivers")
SDL_GetVideoDriver(index int) *sbyte #Foreign("SDL_GetVideoDriver")
SDL_VideoInit(driver_name *sbyte) int #Foreign("SDL_VideoInit")
SDL_VideoQuit() void #Foreign("SDL_VideoQuit")
SDL_GetCurrentVideoDriver() *sbyte #Foreign("SDL_GetCurrentVideoDriver")
SDL_GetNumVideoDisplays() int #Foreign("SDL_GetNumVideoDisplays")
SDL_GetDisplayName(displayIndex int) *sbyte #Foreign("SDL_GetDisplayName")
SDL_GetDisplayBounds(displayIndex int, rect *SDL_Rect #As("SDL_Rect *")) int #Foreign("SDL_GetDisplayBounds")
SDL_GetDisplayUsableBounds(displayIndex int, rect *SDL_Rect #As("SDL_Rect *")) int #Foreign("SDL_GetDisplayUsableBounds")
SDL_GetDisplayDPI(displayIndex int, ddpi *float, hdpi *float, vdpi *float) int #Foreign("SDL_GetDisplayDPI")
SDL_GetDisplayOrientation(displayIndex int) SDL_DisplayOrientation #As("SDL_DisplayOrientation") #Foreign("SDL_GetDisplayOrientation")
SDL_GetNumDisplayModes(displayIndex int) int #Foreign("SDL_GetNumDisplayModes")
SDL_GetDisplayMode(displayIndex int, modeIndex int, mode *SDL_DisplayMode #As("SDL_DisplayMode *")) int #Foreign("SDL_GetDisplayMode")
SDL_GetDesktopDisplayMode(displayIndex int, mode *SDL_DisplayMode #As("SDL_DisplayMode *")) int #Foreign("SDL_GetDesktopDisplayMode")
SDL_GetCurrentDisplayMode(displayIndex int, mode *SDL_DisplayMode #As("SDL_DisplayMode *")) int #Foreign("SDL_GetCurrentDisplayMode")
SDL_GetClosestDisplayMode(displayIndex int, mode *SDL_DisplayMode #As("const SDL_DisplayMode *"), closest *SDL_DisplayMode #As("SDL_DisplayMode *")) *SDL_DisplayMode #As("SDL_DisplayMode *") #Foreign("SDL_GetClosestDisplayMode")
SDL_GetWindowDisplayIndex(window pointer #As("SDL_Window *")) int #Foreign("SDL_GetWindowDisplayIndex")
SDL_SetWindowDisplayMode(window pointer #As("SDL_Window *"), mode *SDL_DisplayMode #As("const SDL_DisplayMode *")) int #Foreign("SDL_SetWindowDisplayMode")
SDL_GetWindowDisplayMode(window pointer #As("SDL_Window *"), mode *SDL_DisplayMode #As("SDL_DisplayMode *")) int #Foreign("SDL_GetWindowDisplayMode")
SDL_GetWindowPixelFormat(window pointer #As("SDL_Window *")) uint #Foreign("SDL_GetWindowPixelFormat")
SDL_CreateWindow(title *sbyte, x int, y int, w int, h int, flags uint) pointer #As("SDL_Window *") #Foreign("SDL_CreateWindow")
SDL_CreateWindowFrom(data pointer) pointer #As("SDL_Window *") #Foreign("SDL_CreateWindowFrom")
SDL_GetWindowID(window pointer #As("SDL_Window *")) uint #Foreign("SDL_GetWindowID")
SDL_GetWindowFromID(id uint) pointer #As("SDL_Window *") #Foreign("SDL_GetWindowFromID")
SDL_GetWindowFlags(window pointer #As("SDL_Window *")) uint #Foreign("SDL_GetWindowFlags")
SDL_SetWindowTitle(window pointer #As("SDL_Window *"), title *sbyte) void #Foreign("SDL_SetWindowTitle")
SDL_GetWindowTitle(window pointer #As("SDL_Window *")) *sbyte #Foreign("SDL_GetWindowTitle")
SDL_SetWindowIcon(window pointer #As("SDL_Window *"), icon *SDL_Surface #As("SDL_Surface *")) void #Foreign("SDL_SetWindowIcon")
SDL_SetWindowData(window pointer #As("SDL_Window *"), name *sbyte, userdata pointer) pointer #Foreign("SDL_SetWindowData")
SDL_GetWindowData(window pointer #As("SDL_Window *"), name *sbyte) pointer #Foreign("SDL_GetWindowData")
SDL_SetWindowPosition(window pointer #As("SDL_Window *"), x int, y int) void #Foreign("SDL_SetWindowPosition")
SDL_GetWindowPosition(window pointer #As("SDL_Window *"), x *int, y *int) void #Foreign("SDL_GetWindowPosition")
SDL_SetWindowSize(window pointer #As("SDL_Window *"), w int, h int) void #Foreign("SDL_SetWindowSize")
SDL_GetWindowSize(window pointer #As("SDL_Window *"), w *int, h *int) void #Foreign("SDL_GetWindowSize")
SDL_GetWindowBordersSize(window pointer #As("SDL_Window *"), top *int, left *int, bottom *int, right *int) int #Foreign("SDL_GetWindowBordersSize")
SDL_SetWindowMinimumSize(window pointer #As("SDL_Window *"), min_w int, min_h int) void #Foreign("SDL_SetWindowMinimumSize")
SDL_GetWindowMinimumSize(window pointer #As("SDL_Window *"), w *int, h *int) void #Foreign("SDL_GetWindowMinimumSize")
SDL_SetWindowMaximumSize(window pointer #As("SDL_Window *"), max_w int, max_h int) void #Foreign("SDL_SetWindowMaximumSize")
SDL_GetWindowMaximumSize(window pointer #As("SDL_Window *"), w *int, h *int) void #Foreign("SDL_GetWindowMaximumSize")
SDL_SetWindowBordered(window pointer #As("SDL_Window *"), bordered SDL_bool #As("SDL_bool")) void #Foreign("SDL_SetWindowBordered")
SDL_SetWindowResizable(window pointer #As("SDL_Window *"), resizable SDL_bool #As("SDL_bool")) void #Foreign("SDL_SetWindowResizable")
SDL_ShowWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_ShowWindow")
SDL_HideWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_HideWindow")
SDL_RaiseWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_RaiseWindow")
SDL_MaximizeWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_MaximizeWindow")
SDL_MinimizeWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_MinimizeWindow")
SDL_RestoreWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_RestoreWindow")
SDL_SetWindowFullscreen(window pointer #As("SDL_Window *"), flags uint) int #Foreign("SDL_SetWindowFullscreen")
SDL_GetWindowSurface(window pointer #As("SDL_Window *")) *SDL_Surface #As("SDL_Surface *") #Foreign("SDL_GetWindowSurface")
SDL_UpdateWindowSurface(window pointer #As("SDL_Window *")) int #Foreign("SDL_UpdateWindowSurface")
SDL_UpdateWindowSurfaceRects(window pointer #As("SDL_Window *"), rects *SDL_Rect #As("const SDL_Rect *"), numrects int) int #Foreign("SDL_UpdateWindowSurfaceRects")
SDL_SetWindowGrab(window pointer #As("SDL_Window *"), grabbed SDL_bool #As("SDL_bool")) void #Foreign("SDL_SetWindowGrab")
SDL_GetWindowGrab(window pointer #As("SDL_Window *")) SDL_bool #As("SDL_bool") #Foreign("SDL_GetWindowGrab")
SDL_GetGrabbedWindow() pointer #As("SDL_Window *") #Foreign("SDL_GetGrabbedWindow")
SDL_SetWindowBrightness(window pointer #As("SDL_Window *"), brightness float) int #Foreign("SDL_SetWindowBrightness")
SDL_GetWindowBrightness(window pointer #As("SDL_Window *")) float #Foreign("SDL_GetWindowBrightness")
SDL_SetWindowOpacity(window pointer #As("SDL_Window *"), opacity float) int #Foreign("SDL_SetWindowOpacity")
SDL_GetWindowOpacity(window pointer #As("SDL_Window *"), out_opacity *float) int #Foreign("SDL_GetWindowOpacity")
SDL_SetWindowModalFor(modal_window pointer #As("SDL_Window *"), parent_window pointer #As("SDL_Window *")) int #Foreign("SDL_SetWindowModalFor")
SDL_SetWindowInputFocus(window pointer #As("SDL_Window *")) int #Foreign("SDL_SetWindowInputFocus")
SDL_SetWindowGammaRamp(window pointer #As("SDL_Window *"), red *ushort, green *ushort, blue *ushort) int #Foreign("SDL_SetWindowGammaRamp")
SDL_GetWindowGammaRamp(window pointer #As("SDL_Window *"), red *ushort, green *ushort, blue *ushort) int #Foreign("SDL_GetWindowGammaRamp")
SDL_HitTestResult enum #Flags {
	SDL_HITTEST_NORMAL = 0_u
	SDL_HITTEST_DRAGGABLE = 1_u
	SDL_HITTEST_RESIZE_TOPLEFT = 2_u
	SDL_HITTEST_RESIZE_TOP = 3_u
	SDL_HITTEST_RESIZE_TOPRIGHT = 4_u
	SDL_HITTEST_RESIZE_RIGHT = 5_u
	SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6_u
	SDL_HITTEST_RESIZE_BOTTOM = 7_u
	SDL_HITTEST_RESIZE_BOTTOMLEFT = 8_u
	SDL_HITTEST_RESIZE_LEFT = 9_u
}
SDL_SetWindowHitTest(window pointer #As("SDL_Window *"), callback pointer #As("SDL_HitTest"), callback_data pointer) int #Foreign("SDL_SetWindowHitTest")
SDL_DestroyWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_DestroyWindow")
SDL_IsScreenSaverEnabled() SDL_bool #As("SDL_bool") #Foreign("SDL_IsScreenSaverEnabled")
SDL_EnableScreenSaver() void #Foreign("SDL_EnableScreenSaver")
SDL_DisableScreenSaver() void #Foreign("SDL_DisableScreenSaver")
SDL_GL_LoadLibrary(path *sbyte) int #Foreign("SDL_GL_LoadLibrary")
SDL_GL_GetProcAddress(proc *sbyte) pointer #Foreign("SDL_GL_GetProcAddress")
SDL_GL_UnloadLibrary() void #Foreign("SDL_GL_UnloadLibrary")
SDL_GL_ExtensionSupported(extension *sbyte) SDL_bool #As("SDL_bool") #Foreign("SDL_GL_ExtensionSupported")
SDL_GL_ResetAttributes() void #Foreign("SDL_GL_ResetAttributes")
SDL_GL_SetAttribute(attr SDL_GLattr #As("SDL_GLattr"), value int) int #Foreign("SDL_GL_SetAttribute")
SDL_GL_GetAttribute(attr SDL_GLattr #As("SDL_GLattr"), value *int) int #Foreign("SDL_GL_GetAttribute")
SDL_GL_CreateContext(window pointer #As("SDL_Window *")) pointer #Foreign("SDL_GL_CreateContext")
SDL_GL_MakeCurrent(window pointer #As("SDL_Window *"), context pointer) int #Foreign("SDL_GL_MakeCurrent")
SDL_GL_GetCurrentWindow() pointer #As("SDL_Window *") #Foreign("SDL_GL_GetCurrentWindow")
SDL_GL_GetCurrentContext() pointer #Foreign("SDL_GL_GetCurrentContext")
SDL_GL_GetDrawableSize(window pointer #As("SDL_Window *"), w *int, h *int) void #Foreign("SDL_GL_GetDrawableSize")
SDL_GL_SetSwapInterval(interval int) int #Foreign("SDL_GL_SetSwapInterval")
SDL_GL_GetSwapInterval() int #Foreign("SDL_GL_GetSwapInterval")
SDL_GL_SwapWindow(window pointer #As("SDL_Window *")) void #Foreign("SDL_GL_SwapWindow")
SDL_GL_DeleteContext(context pointer) void #Foreign("SDL_GL_DeleteContext")
SDL_Scancode enum #Flags {
	SDL_SCANCODE_UNKNOWN = 0_u
	SDL_SCANCODE_A = 4_u
	SDL_SCANCODE_B = 5_u
	SDL_SCANCODE_C = 6_u
	SDL_SCANCODE_D = 7_u
	SDL_SCANCODE_E = 8_u
	SDL_SCANCODE_F = 9_u
	SDL_SCANCODE_G = 10_u
	SDL_SCANCODE_H = 11_u
	SDL_SCANCODE_I = 12_u
	SDL_SCANCODE_J = 13_u
	SDL_SCANCODE_K = 14_u
	SDL_SCANCODE_L = 15_u
	SDL_SCANCODE_M = 16_u
	SDL_SCANCODE_N = 17_u
	SDL_SCANCODE_O = 18_u
	SDL_SCANCODE_P = 19_u
	SDL_SCANCODE_Q = 20_u
	SDL_SCANCODE_R = 21_u
	SDL_SCANCODE_S = 22_u
	SDL_SCANCODE_T = 23_u
	SDL_SCANCODE_U = 24_u
	SDL_SCANCODE_V = 25_u
	SDL_SCANCODE_W = 26_u
	SDL_SCANCODE_X = 27_u
	SDL_SCANCODE_Y = 28_u
	SDL_SCANCODE_Z = 29_u
	SDL_SCANCODE_1 = 30_u
	SDL_SCANCODE_2 = 31_u
	SDL_SCANCODE_3 = 32_u
	SDL_SCANCODE_4 = 33_u
	SDL_SCANCODE_5 = 34_u
	SDL_SCANCODE_6 = 35_u
	SDL_SCANCODE_7 = 36_u
	SDL_SCANCODE_8 = 37_u
	SDL_SCANCODE_9 = 38_u
	SDL_SCANCODE_0 = 39_u
	SDL_SCANCODE_RETURN = 40_u
	SDL_SCANCODE_ESCAPE = 41_u
	SDL_SCANCODE_BACKSPACE = 42_u
	SDL_SCANCODE_TAB = 43_u
	SDL_SCANCODE_SPACE = 44_u
	SDL_SCANCODE_MINUS = 45_u
	SDL_SCANCODE_EQUALS = 46_u
	SDL_SCANCODE_LEFTBRACKET = 47_u
	SDL_SCANCODE_RIGHTBRACKET = 48_u
	SDL_SCANCODE_BACKSLASH = 49_u
	SDL_SCANCODE_NONUSHASH = 50_u
	SDL_SCANCODE_SEMICOLON = 51_u
	SDL_SCANCODE_APOSTROPHE = 52_u
	SDL_SCANCODE_GRAVE = 53_u
	SDL_SCANCODE_COMMA = 54_u
	SDL_SCANCODE_PERIOD = 55_u
	SDL_SCANCODE_SLASH = 56_u
	SDL_SCANCODE_CAPSLOCK = 57_u
	SDL_SCANCODE_F1 = 58_u
	SDL_SCANCODE_F2 = 59_u
	SDL_SCANCODE_F3 = 60_u
	SDL_SCANCODE_F4 = 61_u
	SDL_SCANCODE_F5 = 62_u
	SDL_SCANCODE_F6 = 63_u
	SDL_SCANCODE_F7 = 64_u
	SDL_SCANCODE_F8 = 65_u
	SDL_SCANCODE_F9 = 66_u
	SDL_SCANCODE_F10 = 67_u
	SDL_SCANCODE_F11 = 68_u
	SDL_SCANCODE_F12 = 69_u
	SDL_SCANCODE_PRINTSCREEN = 70_u
	SDL_SCANCODE_SCROLLLOCK = 71_u
	SDL_SCANCODE_PAUSE = 72_u
	SDL_SCANCODE_INSERT = 73_u
	SDL_SCANCODE_HOME = 74_u
	SDL_SCANCODE_PAGEUP = 75_u
	SDL_SCANCODE_DELETE = 76_u
	SDL_SCANCODE_END = 77_u
	SDL_SCANCODE_PAGEDOWN = 78_u
	SDL_SCANCODE_RIGHT = 79_u
	SDL_SCANCODE_LEFT = 80_u
	SDL_SCANCODE_DOWN = 81_u
	SDL_SCANCODE_UP = 82_u
	SDL_SCANCODE_NUMLOCKCLEAR = 83_u
	SDL_SCANCODE_KP_DIVIDE = 84_u
	SDL_SCANCODE_KP_MULTIPLY = 85_u
	SDL_SCANCODE_KP_MINUS = 86_u
	SDL_SCANCODE_KP_PLUS = 87_u
	SDL_SCANCODE_KP_ENTER = 88_u
	SDL_SCANCODE_KP_1 = 89_u
	SDL_SCANCODE_KP_2 = 90_u
	SDL_SCANCODE_KP_3 = 91_u
	SDL_SCANCODE_KP_4 = 92_u
	SDL_SCANCODE_KP_5 = 93_u
	SDL_SCANCODE_KP_6 = 94_u
	SDL_SCANCODE_KP_7 = 95_u
	SDL_SCANCODE_KP_8 = 96_u
	SDL_SCANCODE_KP_9 = 97_u
	SDL_SCANCODE_KP_0 = 98_u
	SDL_SCANCODE_KP_PERIOD = 99_u
	SDL_SCANCODE_NONUSBACKSLASH = 100_u
	SDL_SCANCODE_APPLICATION = 101_u
	SDL_SCANCODE_POWER = 102_u
	SDL_SCANCODE_KP_EQUALS = 103_u
	SDL_SCANCODE_F13 = 104_u
	SDL_SCANCODE_F14 = 105_u
	SDL_SCANCODE_F15 = 106_u
	SDL_SCANCODE_F16 = 107_u
	SDL_SCANCODE_F17 = 108_u
	SDL_SCANCODE_F18 = 109_u
	SDL_SCANCODE_F19 = 110_u
	SDL_SCANCODE_F20 = 111_u
	SDL_SCANCODE_F21 = 112_u
	SDL_SCANCODE_F22 = 113_u
	SDL_SCANCODE_F23 = 114_u
	SDL_SCANCODE_F24 = 115_u
	SDL_SCANCODE_EXECUTE = 116_u
	SDL_SCANCODE_HELP = 117_u
	SDL_SCANCODE_MENU = 118_u
	SDL_SCANCODE_SELECT = 119_u
	SDL_SCANCODE_STOP = 120_u
	SDL_SCANCODE_AGAIN = 121_u
	SDL_SCANCODE_UNDO = 122_u
	SDL_SCANCODE_CUT = 123_u
	SDL_SCANCODE_COPY = 124_u
	SDL_SCANCODE_PASTE = 125_u
	SDL_SCANCODE_FIND = 126_u
	SDL_SCANCODE_MUTE = 127_u
	SDL_SCANCODE_VOLUMEUP = 128_u
	SDL_SCANCODE_VOLUMEDOWN = 129_u
	SDL_SCANCODE_KP_COMMA = 133_u
	SDL_SCANCODE_KP_EQUALSAS400 = 134_u
	SDL_SCANCODE_INTERNATIONAL1 = 135_u
	SDL_SCANCODE_INTERNATIONAL2 = 136_u
	SDL_SCANCODE_INTERNATIONAL3 = 137_u
	SDL_SCANCODE_INTERNATIONAL4 = 138_u
	SDL_SCANCODE_INTERNATIONAL5 = 139_u
	SDL_SCANCODE_INTERNATIONAL6 = 140_u
	SDL_SCANCODE_INTERNATIONAL7 = 141_u
	SDL_SCANCODE_INTERNATIONAL8 = 142_u
	SDL_SCANCODE_INTERNATIONAL9 = 143_u
	SDL_SCANCODE_LANG1 = 144_u
	SDL_SCANCODE_LANG2 = 145_u
	SDL_SCANCODE_LANG3 = 146_u
	SDL_SCANCODE_LANG4 = 147_u
	SDL_SCANCODE_LANG5 = 148_u
	SDL_SCANCODE_LANG6 = 149_u
	SDL_SCANCODE_LANG7 = 150_u
	SDL_SCANCODE_LANG8 = 151_u
	SDL_SCANCODE_LANG9 = 152_u
	SDL_SCANCODE_ALTERASE = 153_u
	SDL_SCANCODE_SYSREQ = 154_u
	SDL_SCANCODE_CANCEL = 155_u
	SDL_SCANCODE_CLEAR = 156_u
	SDL_SCANCODE_PRIOR = 157_u
	SDL_SCANCODE_RETURN2 = 158_u
	SDL_SCANCODE_SEPARATOR = 159_u
	SDL_SCANCODE_OUT = 160_u
	SDL_SCANCODE_OPER = 161_u
	SDL_SCANCODE_CLEARAGAIN = 162_u
	SDL_SCANCODE_CRSEL = 163_u
	SDL_SCANCODE_EXSEL = 164_u
	SDL_SCANCODE_KP_00 = 176_u
	SDL_SCANCODE_KP_000 = 177_u
	SDL_SCANCODE_THOUSANDSSEPARATOR = 178_u
	SDL_SCANCODE_DECIMALSEPARATOR = 179_u
	SDL_SCANCODE_CURRENCYUNIT = 180_u
	SDL_SCANCODE_CURRENCYSUBUNIT = 181_u
	SDL_SCANCODE_KP_LEFTPAREN = 182_u
	SDL_SCANCODE_KP_RIGHTPAREN = 183_u
	SDL_SCANCODE_KP_LEFTBRACE = 184_u
	SDL_SCANCODE_KP_RIGHTBRACE = 185_u
	SDL_SCANCODE_KP_TAB = 186_u
	SDL_SCANCODE_KP_BACKSPACE = 187_u
	SDL_SCANCODE_KP_A = 188_u
	SDL_SCANCODE_KP_B = 189_u
	SDL_SCANCODE_KP_C = 190_u
	SDL_SCANCODE_KP_D = 191_u
	SDL_SCANCODE_KP_E = 192_u
	SDL_SCANCODE_KP_F = 193_u
	SDL_SCANCODE_KP_XOR = 194_u
	SDL_SCANCODE_KP_POWER = 195_u
	SDL_SCANCODE_KP_PERCENT = 196_u
	SDL_SCANCODE_KP_LESS = 197_u
	SDL_SCANCODE_KP_GREATER = 198_u
	SDL_SCANCODE_KP_AMPERSAND = 199_u
	SDL_SCANCODE_KP_DBLAMPERSAND = 200_u
	SDL_SCANCODE_KP_VERTICALBAR = 201_u
	SDL_SCANCODE_KP_DBLVERTICALBAR = 202_u
	SDL_SCANCODE_KP_COLON = 203_u
	SDL_SCANCODE_KP_HASH = 204_u
	SDL_SCANCODE_KP_SPACE = 205_u
	SDL_SCANCODE_KP_AT = 206_u
	SDL_SCANCODE_KP_EXCLAM = 207_u
	SDL_SCANCODE_KP_MEMSTORE = 208_u
	SDL_SCANCODE_KP_MEMRECALL = 209_u
	SDL_SCANCODE_KP_MEMCLEAR = 210_u
	SDL_SCANCODE_KP_MEMADD = 211_u
	SDL_SCANCODE_KP_MEMSUBTRACT = 212_u
	SDL_SCANCODE_KP_MEMMULTIPLY = 213_u
	SDL_SCANCODE_KP_MEMDIVIDE = 214_u
	SDL_SCANCODE_KP_PLUSMINUS = 215_u
	SDL_SCANCODE_KP_CLEAR = 216_u
	SDL_SCANCODE_KP_CLEARENTRY = 217_u
	SDL_SCANCODE_KP_BINARY = 218_u
	SDL_SCANCODE_KP_OCTAL = 219_u
	SDL_SCANCODE_KP_DECIMAL = 220_u
	SDL_SCANCODE_KP_HEXADECIMAL = 221_u
	SDL_SCANCODE_LCTRL = 224_u
	SDL_SCANCODE_LSHIFT = 225_u
	SDL_SCANCODE_LALT = 226_u
	SDL_SCANCODE_LGUI = 227_u
	SDL_SCANCODE_RCTRL = 228_u
	SDL_SCANCODE_RSHIFT = 229_u
	SDL_SCANCODE_RALT = 230_u
	SDL_SCANCODE_RGUI = 231_u
	SDL_SCANCODE_MODE = 257_u
	SDL_SCANCODE_AUDIONEXT = 258_u
	SDL_SCANCODE_AUDIOPREV = 259_u
	SDL_SCANCODE_AUDIOSTOP = 260_u
	SDL_SCANCODE_AUDIOPLAY = 261_u
	SDL_SCANCODE_AUDIOMUTE = 262_u
	SDL_SCANCODE_MEDIASELECT = 263_u
	SDL_SCANCODE_WWW = 264_u
	SDL_SCANCODE_MAIL = 265_u
	SDL_SCANCODE_CALCULATOR = 266_u
	SDL_SCANCODE_COMPUTER = 267_u
	SDL_SCANCODE_AC_SEARCH = 268_u
	SDL_SCANCODE_AC_HOME = 269_u
	SDL_SCANCODE_AC_BACK = 270_u
	SDL_SCANCODE_AC_FORWARD = 271_u
	SDL_SCANCODE_AC_STOP = 272_u
	SDL_SCANCODE_AC_REFRESH = 273_u
	SDL_SCANCODE_AC_BOOKMARKS = 274_u
	SDL_SCANCODE_BRIGHTNESSDOWN = 275_u
	SDL_SCANCODE_BRIGHTNESSUP = 276_u
	SDL_SCANCODE_DISPLAYSWITCH = 277_u
	SDL_SCANCODE_KBDILLUMTOGGLE = 278_u
	SDL_SCANCODE_KBDILLUMDOWN = 279_u
	SDL_SCANCODE_KBDILLUMUP = 280_u
	SDL_SCANCODE_EJECT = 281_u
	SDL_SCANCODE_SLEEP = 282_u
	SDL_SCANCODE_APP1 = 283_u
	SDL_SCANCODE_APP2 = 284_u
	SDL_SCANCODE_AUDIOREWIND = 285_u
	SDL_SCANCODE_AUDIOFASTFORWARD = 286_u
	SDL_NUM_SCANCODES = 512_u
}
SDL_KeyCode enum #Flags {
	SDLK_UNKNOWN = 0_u
	SDLK_RETURN = 13_u
	SDLK_ESCAPE = 27_u
	SDLK_BACKSPACE = 8_u
	SDLK_TAB = 9_u
	SDLK_SPACE = 32_u
	SDLK_EXCLAIM = 33_u
	SDLK_QUOTEDBL = 34_u
	SDLK_HASH = 35_u
	SDLK_PERCENT = 37_u
	SDLK_DOLLAR = 36_u
	SDLK_AMPERSAND = 38_u
	SDLK_QUOTE = 39_u
	SDLK_LEFTPAREN = 40_u
	SDLK_RIGHTPAREN = 41_u
	SDLK_ASTERISK = 42_u
	SDLK_PLUS = 43_u
	SDLK_COMMA = 44_u
	SDLK_MINUS = 45_u
	SDLK_PERIOD = 46_u
	SDLK_SLASH = 47_u
	SDLK_0 = 48_u
	SDLK_1 = 49_u
	SDLK_2 = 50_u
	SDLK_3 = 51_u
	SDLK_4 = 52_u
	SDLK_5 = 53_u
	SDLK_6 = 54_u
	SDLK_7 = 55_u
	SDLK_8 = 56_u
	SDLK_9 = 57_u
	SDLK_COLON = 58_u
	SDLK_SEMICOLON = 59_u
	SDLK_LESS = 60_u
	SDLK_EQUALS = 61_u
	SDLK_GREATER = 62_u
	SDLK_QUESTION = 63_u
	SDLK_AT = 64_u
	SDLK_LEFTBRACKET = 91_u
	SDLK_BACKSLASH = 92_u
	SDLK_RIGHTBRACKET = 93_u
	SDLK_CARET = 94_u
	SDLK_UNDERSCORE = 95_u
	SDLK_BACKQUOTE = 96_u
	SDLK_a = 97_u
	SDLK_b = 98_u
	SDLK_c = 99_u
	SDLK_d = 100_u
	SDLK_e = 101_u
	SDLK_f = 102_u
	SDLK_g = 103_u
	SDLK_h = 104_u
	SDLK_i = 105_u
	SDLK_j = 106_u
	SDLK_k = 107_u
	SDLK_l = 108_u
	SDLK_m = 109_u
	SDLK_n = 110_u
	SDLK_o = 111_u
	SDLK_p = 112_u
	SDLK_q = 113_u
	SDLK_r = 114_u
	SDLK_s = 115_u
	SDLK_t = 116_u
	SDLK_u = 117_u
	SDLK_v = 118_u
	SDLK_w = 119_u
	SDLK_x = 120_u
	SDLK_y = 121_u
	SDLK_z = 122_u
	SDLK_CAPSLOCK = 1073741881_u
	SDLK_F1 = 1073741882_u
	SDLK_F2 = 1073741883_u
	SDLK_F3 = 1073741884_u
	SDLK_F4 = 1073741885_u
	SDLK_F5 = 1073741886_u
	SDLK_F6 = 1073741887_u
	SDLK_F7 = 1073741888_u
	SDLK_F8 = 1073741889_u
	SDLK_F9 = 1073741890_u
	SDLK_F10 = 1073741891_u
	SDLK_F11 = 1073741892_u
	SDLK_F12 = 1073741893_u
	SDLK_PRINTSCREEN = 1073741894_u
	SDLK_SCROLLLOCK = 1073741895_u
	SDLK_PAUSE = 1073741896_u
	SDLK_INSERT = 1073741897_u
	SDLK_HOME = 1073741898_u
	SDLK_PAGEUP = 1073741899_u
	SDLK_DELETE = 127_u
	SDLK_END = 1073741901_u
	SDLK_PAGEDOWN = 1073741902_u
	SDLK_RIGHT = 1073741903_u
	SDLK_LEFT = 1073741904_u
	SDLK_DOWN = 1073741905_u
	SDLK_UP = 1073741906_u
	SDLK_NUMLOCKCLEAR = 1073741907_u
	SDLK_KP_DIVIDE = 1073741908_u
	SDLK_KP_MULTIPLY = 1073741909_u
	SDLK_KP_MINUS = 1073741910_u
	SDLK_KP_PLUS = 1073741911_u
	SDLK_KP_ENTER = 1073741912_u
	SDLK_KP_1 = 1073741913_u
	SDLK_KP_2 = 1073741914_u
	SDLK_KP_3 = 1073741915_u
	SDLK_KP_4 = 1073741916_u
	SDLK_KP_5 = 1073741917_u
	SDLK_KP_6 = 1073741918_u
	SDLK_KP_7 = 1073741919_u
	SDLK_KP_8 = 1073741920_u
	SDLK_KP_9 = 1073741921_u
	SDLK_KP_0 = 1073741922_u
	SDLK_KP_PERIOD = 1073741923_u
	SDLK_APPLICATION = 1073741925_u
	SDLK_POWER = 1073741926_u
	SDLK_KP_EQUALS = 1073741927_u
	SDLK_F13 = 1073741928_u
	SDLK_F14 = 1073741929_u
	SDLK_F15 = 1073741930_u
	SDLK_F16 = 1073741931_u
	SDLK_F17 = 1073741932_u
	SDLK_F18 = 1073741933_u
	SDLK_F19 = 1073741934_u
	SDLK_F20 = 1073741935_u
	SDLK_F21 = 1073741936_u
	SDLK_F22 = 1073741937_u
	SDLK_F23 = 1073741938_u
	SDLK_F24 = 1073741939_u
	SDLK_EXECUTE = 1073741940_u
	SDLK_HELP = 1073741941_u
	SDLK_MENU = 1073741942_u
	SDLK_SELECT = 1073741943_u
	SDLK_STOP = 1073741944_u
	SDLK_AGAIN = 1073741945_u
	SDLK_UNDO = 1073741946_u
	SDLK_CUT = 1073741947_u
	SDLK_COPY = 1073741948_u
	SDLK_PASTE = 1073741949_u
	SDLK_FIND = 1073741950_u
	SDLK_MUTE = 1073741951_u
	SDLK_VOLUMEUP = 1073741952_u
	SDLK_VOLUMEDOWN = 1073741953_u
	SDLK_KP_COMMA = 1073741957_u
	SDLK_KP_EQUALSAS400 = 1073741958_u
	SDLK_ALTERASE = 1073741977_u
	SDLK_SYSREQ = 1073741978_u
	SDLK_CANCEL = 1073741979_u
	SDLK_CLEAR = 1073741980_u
	SDLK_PRIOR = 1073741981_u
	SDLK_RETURN2 = 1073741982_u
	SDLK_SEPARATOR = 1073741983_u
	SDLK_OUT = 1073741984_u
	SDLK_OPER = 1073741985_u
	SDLK_CLEARAGAIN = 1073741986_u
	SDLK_CRSEL = 1073741987_u
	SDLK_EXSEL = 1073741988_u
	SDLK_KP_00 = 1073742000_u
	SDLK_KP_000 = 1073742001_u
	SDLK_THOUSANDSSEPARATOR = 1073742002_u
	SDLK_DECIMALSEPARATOR = 1073742003_u
	SDLK_CURRENCYUNIT = 1073742004_u
	SDLK_CURRENCYSUBUNIT = 1073742005_u
	SDLK_KP_LEFTPAREN = 1073742006_u
	SDLK_KP_RIGHTPAREN = 1073742007_u
	SDLK_KP_LEFTBRACE = 1073742008_u
	SDLK_KP_RIGHTBRACE = 1073742009_u
	SDLK_KP_TAB = 1073742010_u
	SDLK_KP_BACKSPACE = 1073742011_u
	SDLK_KP_A = 1073742012_u
	SDLK_KP_B = 1073742013_u
	SDLK_KP_C = 1073742014_u
	SDLK_KP_D = 1073742015_u
	SDLK_KP_E = 1073742016_u
	SDLK_KP_F = 1073742017_u
	SDLK_KP_XOR = 1073742018_u
	SDLK_KP_POWER = 1073742019_u
	SDLK_KP_PERCENT = 1073742020_u
	SDLK_KP_LESS = 1073742021_u
	SDLK_KP_GREATER = 1073742022_u
	SDLK_KP_AMPERSAND = 1073742023_u
	SDLK_KP_DBLAMPERSAND = 1073742024_u
	SDLK_KP_VERTICALBAR = 1073742025_u
	SDLK_KP_DBLVERTICALBAR = 1073742026_u
	SDLK_KP_COLON = 1073742027_u
	SDLK_KP_HASH = 1073742028_u
	SDLK_KP_SPACE = 1073742029_u
	SDLK_KP_AT = 1073742030_u
	SDLK_KP_EXCLAM = 1073742031_u
	SDLK_KP_MEMSTORE = 1073742032_u
	SDLK_KP_MEMRECALL = 1073742033_u
	SDLK_KP_MEMCLEAR = 1073742034_u
	SDLK_KP_MEMADD = 1073742035_u
	SDLK_KP_MEMSUBTRACT = 1073742036_u
	SDLK_KP_MEMMULTIPLY = 1073742037_u
	SDLK_KP_MEMDIVIDE = 1073742038_u
	SDLK_KP_PLUSMINUS = 1073742039_u
	SDLK_KP_CLEAR = 1073742040_u
	SDLK_KP_CLEARENTRY = 1073742041_u
	SDLK_KP_BINARY = 1073742042_u
	SDLK_KP_OCTAL = 1073742043_u
	SDLK_KP_DECIMAL = 1073742044_u
	SDLK_KP_HEXADECIMAL = 1073742045_u
	SDLK_LCTRL = 1073742048_u
	SDLK_LSHIFT = 1073742049_u
	SDLK_LALT = 1073742050_u
	SDLK_LGUI = 1073742051_u
	SDLK_RCTRL = 1073742052_u
	SDLK_RSHIFT = 1073742053_u
	SDLK_RALT = 1073742054_u
	SDLK_RGUI = 1073742055_u
	SDLK_MODE = 1073742081_u
	SDLK_AUDIONEXT = 1073742082_u
	SDLK_AUDIOPREV = 1073742083_u
	SDLK_AUDIOSTOP = 1073742084_u
	SDLK_AUDIOPLAY = 1073742085_u
	SDLK_AUDIOMUTE = 1073742086_u
	SDLK_MEDIASELECT = 1073742087_u
	SDLK_WWW = 1073742088_u
	SDLK_MAIL = 1073742089_u
	SDLK_CALCULATOR = 1073742090_u
	SDLK_COMPUTER = 1073742091_u
	SDLK_AC_SEARCH = 1073742092_u
	SDLK_AC_HOME = 1073742093_u
	SDLK_AC_BACK = 1073742094_u
	SDLK_AC_FORWARD = 1073742095_u
	SDLK_AC_STOP = 1073742096_u
	SDLK_AC_REFRESH = 1073742097_u
	SDLK_AC_BOOKMARKS = 1073742098_u
	SDLK_BRIGHTNESSDOWN = 1073742099_u
	SDLK_BRIGHTNESSUP = 1073742100_u
	SDLK_DISPLAYSWITCH = 1073742101_u
	SDLK_KBDILLUMTOGGLE = 1073742102_u
	SDLK_KBDILLUMDOWN = 1073742103_u
	SDLK_KBDILLUMUP = 1073742104_u
	SDLK_EJECT = 1073742105_u
	SDLK_SLEEP = 1073742106_u
	SDLK_APP1 = 1073742107_u
	SDLK_APP2 = 1073742108_u
	SDLK_AUDIOREWIND = 1073742109_u
	SDLK_AUDIOFASTFORWARD = 1073742110_u
}
:KMOD_NONE uint = 0_u
:KMOD_LSHIFT uint = 1_u
:KMOD_RSHIFT uint = 2_u
:KMOD_LCTRL uint = 64_u
:KMOD_RCTRL uint = 128_u
:KMOD_LALT uint = 256_u
:KMOD_RALT uint = 512_u
:KMOD_LGUI uint = 1024_u
:KMOD_RGUI uint = 2048_u
:KMOD_NUM uint = 4096_u
:KMOD_CAPS uint = 8192_u
:KMOD_MODE uint = 16384_u
:KMOD_RESERVED uint = 32768_u
SDL_Keymod enum #Flags {
	KMOD_NONE = 0_u
	KMOD_LSHIFT = 1_u
	KMOD_RSHIFT = 2_u
	KMOD_LCTRL = 64_u
	KMOD_RCTRL = 128_u
	KMOD_LALT = 256_u
	KMOD_RALT = 512_u
	KMOD_LGUI = 1024_u
	KMOD_RGUI = 2048_u
	KMOD_NUM = 4096_u
	KMOD_CAPS = 8192_u
	KMOD_MODE = 16384_u
	KMOD_RESERVED = 32768_u
}
SDL_Keysym struct {
	scancode SDL_Scancode
	sym int
	mod ushort
	unused uint
}
SDL_GetKeyboardFocus() pointer #As("SDL_Window *") #Foreign("SDL_GetKeyboardFocus")
SDL_GetKeyboardState(numkeys *int) *byte #Foreign("SDL_GetKeyboardState")
SDL_GetModState() SDL_Keymod #As("SDL_Keymod") #Foreign("SDL_GetModState")
SDL_SetModState(modstate SDL_Keymod #As("SDL_Keymod")) void #Foreign("SDL_SetModState")
SDL_GetKeyFromScancode(scancode SDL_Scancode #As("SDL_Scancode")) int #Foreign("SDL_GetKeyFromScancode")
SDL_GetScancodeFromKey(key int) SDL_Scancode #As("SDL_Scancode") #Foreign("SDL_GetScancodeFromKey")
SDL_GetScancodeName(scancode SDL_Scancode #As("SDL_Scancode")) *sbyte #Foreign("SDL_GetScancodeName")
SDL_GetScancodeFromName(name *sbyte) SDL_Scancode #As("SDL_Scancode") #Foreign("SDL_GetScancodeFromName")
SDL_GetKeyName(key int) *sbyte #Foreign("SDL_GetKeyName")
SDL_GetKeyFromName(name *sbyte) int #Foreign("SDL_GetKeyFromName")
SDL_StartTextInput() void #Foreign("SDL_StartTextInput")
SDL_IsTextInputActive() SDL_bool #As("SDL_bool") #Foreign("SDL_IsTextInputActive")
SDL_StopTextInput() void #Foreign("SDL_StopTextInput")
SDL_SetTextInputRect(rect *SDL_Rect #As("SDL_Rect *")) void #Foreign("SDL_SetTextInputRect")
SDL_HasScreenKeyboardSupport() SDL_bool #As("SDL_bool") #Foreign("SDL_HasScreenKeyboardSupport")
SDL_IsScreenKeyboardShown(window pointer #As("SDL_Window *")) SDL_bool #As("SDL_bool") #Foreign("SDL_IsScreenKeyboardShown")
SDL_SystemCursor enum #Flags {
	SDL_SYSTEM_CURSOR_ARROW = 0_u
	SDL_SYSTEM_CURSOR_IBEAM = 1_u
	SDL_SYSTEM_CURSOR_WAIT = 2_u
	SDL_SYSTEM_CURSOR_CROSSHAIR = 3_u
	SDL_SYSTEM_CURSOR_WAITARROW = 4_u
	SDL_SYSTEM_CURSOR_SIZENWSE = 5_u
	SDL_SYSTEM_CURSOR_SIZENESW = 6_u
	SDL_SYSTEM_CURSOR_SIZEWE = 7_u
	SDL_SYSTEM_CURSOR_SIZENS = 8_u
	SDL_SYSTEM_CURSOR_SIZEALL = 9_u
	SDL_SYSTEM_CURSOR_NO = 10_u
	SDL_SYSTEM_CURSOR_HAND = 11_u
	SDL_NUM_SYSTEM_CURSORS = 12_u
}
SDL_MouseWheelDirection enum #Flags {
	SDL_MOUSEWHEEL_NORMAL = 0_u
	SDL_MOUSEWHEEL_FLIPPED = 1_u
}
SDL_GetMouseFocus() pointer #As("SDL_Window *") #Foreign("SDL_GetMouseFocus")
SDL_GetMouseState(x *int, y *int) uint #Foreign("SDL_GetMouseState")
SDL_GetGlobalMouseState(x *int, y *int) uint #Foreign("SDL_GetGlobalMouseState")
SDL_GetRelativeMouseState(x *int, y *int) uint #Foreign("SDL_GetRelativeMouseState")
SDL_WarpMouseInWindow(window pointer #As("SDL_Window *"), x int, y int) void #Foreign("SDL_WarpMouseInWindow")
SDL_WarpMouseGlobal(x int, y int) int #Foreign("SDL_WarpMouseGlobal")
SDL_SetRelativeMouseMode(enabled SDL_bool #As("SDL_bool")) int #Foreign("SDL_SetRelativeMouseMode")
SDL_CaptureMouse(enabled SDL_bool #As("SDL_bool")) int #Foreign("SDL_CaptureMouse")
SDL_GetRelativeMouseMode() SDL_bool #As("SDL_bool") #Foreign("SDL_GetRelativeMouseMode")
SDL_CreateCursor(data *byte, mask *byte, w int, h int, hot_x int, hot_y int) pointer #As("SDL_Cursor *") #Foreign("SDL_CreateCursor")
SDL_CreateColorCursor(surface *SDL_Surface #As("SDL_Surface *"), hot_x int, hot_y int) pointer #As("SDL_Cursor *") #Foreign("SDL_CreateColorCursor")
SDL_CreateSystemCursor(id SDL_SystemCursor #As("SDL_SystemCursor")) pointer #As("SDL_Cursor *") #Foreign("SDL_CreateSystemCursor")
SDL_SetCursor(cursor pointer #As("SDL_Cursor *")) void #Foreign("SDL_SetCursor")
SDL_GetCursor() pointer #As("SDL_Cursor *") #Foreign("SDL_GetCursor")
SDL_GetDefaultCursor() pointer #As("SDL_Cursor *") #Foreign("SDL_GetDefaultCursor")
SDL_FreeCursor(cursor pointer #As("SDL_Cursor *")) void #Foreign("SDL_FreeCursor")
SDL_ShowCursor(toggle int) int #Foreign("SDL_ShowCursor")
SDL_JoystickGUID struct {
	data_0 byte
	data_1 byte
	data_2 byte
	data_3 byte
	data_4 byte
	data_5 byte
	data_6 byte
	data_7 byte
	data_8 byte
	data_9 byte
	data_10 byte
	data_11 byte
	data_12 byte
	data_13 byte
	data_14 byte
	data_15 byte
}
SDL_JoystickType enum #Flags {
	SDL_JOYSTICK_TYPE_UNKNOWN = 0_u
	SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1_u
	SDL_JOYSTICK_TYPE_WHEEL = 2_u
	SDL_JOYSTICK_TYPE_ARCADE_STICK = 3_u
	SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4_u
	SDL_JOYSTICK_TYPE_DANCE_PAD = 5_u
	SDL_JOYSTICK_TYPE_GUITAR = 6_u
	SDL_JOYSTICK_TYPE_DRUM_KIT = 7_u
	SDL_JOYSTICK_TYPE_ARCADE_PAD = 8_u
	SDL_JOYSTICK_TYPE_THROTTLE = 9_u
}
SDL_JoystickPowerLevel enum #Flags {
	SDL_JOYSTICK_POWER_UNKNOWN_ffigen_modified = 4294967295_u
	SDL_JOYSTICK_POWER_EMPTY = 0_u
	SDL_JOYSTICK_POWER_LOW = 1_u
	SDL_JOYSTICK_POWER_MEDIUM = 2_u
	SDL_JOYSTICK_POWER_FULL = 3_u
	SDL_JOYSTICK_POWER_WIRED = 4_u
	SDL_JOYSTICK_POWER_MAX = 5_u
}
SDL_LockJoysticks() void #Foreign("SDL_LockJoysticks")
SDL_UnlockJoysticks() void #Foreign("SDL_UnlockJoysticks")
SDL_NumJoysticks() int #Foreign("SDL_NumJoysticks")
SDL_JoystickNameForIndex(device_index int) *sbyte #Foreign("SDL_JoystickNameForIndex")
SDL_JoystickGetDevicePlayerIndex(device_index int) int #Foreign("SDL_JoystickGetDevicePlayerIndex")
SDL_JoystickGetDeviceGUID(device_index int) SDL_JoystickGUID #As("SDL_JoystickGUID") #Foreign("SDL_JoystickGetDeviceGUID")
SDL_JoystickGetDeviceVendor(device_index int) ushort #Foreign("SDL_JoystickGetDeviceVendor")
SDL_JoystickGetDeviceProduct(device_index int) ushort #Foreign("SDL_JoystickGetDeviceProduct")
SDL_JoystickGetDeviceProductVersion(device_index int) ushort #Foreign("SDL_JoystickGetDeviceProductVersion")
SDL_JoystickGetDeviceType(device_index int) SDL_JoystickType #As("SDL_JoystickType") #Foreign("SDL_JoystickGetDeviceType")
SDL_JoystickGetDeviceInstanceID(device_index int) int #Foreign("SDL_JoystickGetDeviceInstanceID")
SDL_JoystickOpen(device_index int) pointer #As("SDL_Joystick *") #Foreign("SDL_JoystickOpen")
SDL_JoystickFromInstanceID(instance_id int) pointer #As("SDL_Joystick *") #Foreign("SDL_JoystickFromInstanceID")
SDL_JoystickFromPlayerIndex(player_index int) pointer #As("SDL_Joystick *") #Foreign("SDL_JoystickFromPlayerIndex")
SDL_JoystickName(joystick pointer #As("SDL_Joystick *")) *sbyte #Foreign("SDL_JoystickName")
SDL_JoystickGetPlayerIndex(joystick pointer #As("SDL_Joystick *")) int #Foreign("SDL_JoystickGetPlayerIndex")
SDL_JoystickSetPlayerIndex(joystick pointer #As("SDL_Joystick *"), player_index int) void #Foreign("SDL_JoystickSetPlayerIndex")
SDL_JoystickGetGUID(joystick pointer #As("SDL_Joystick *")) SDL_JoystickGUID #As("SDL_JoystickGUID") #Foreign("SDL_JoystickGetGUID")
SDL_JoystickGetVendor(joystick pointer #As("SDL_Joystick *")) ushort #Foreign("SDL_JoystickGetVendor")
SDL_JoystickGetProduct(joystick pointer #As("SDL_Joystick *")) ushort #Foreign("SDL_JoystickGetProduct")
SDL_JoystickGetProductVersion(joystick pointer #As("SDL_Joystick *")) ushort #Foreign("SDL_JoystickGetProductVersion")
SDL_JoystickGetType(joystick pointer #As("SDL_Joystick *")) SDL_JoystickType #As("SDL_JoystickType") #Foreign("SDL_JoystickGetType")
SDL_JoystickGetGUIDString(guid SDL_JoystickGUID #As("SDL_JoystickGUID"), pszGUID *sbyte, cbGUID int) void #Foreign("SDL_JoystickGetGUIDString")
SDL_JoystickGetGUIDFromString(pchGUID *sbyte) SDL_JoystickGUID #As("SDL_JoystickGUID") #Foreign("SDL_JoystickGetGUIDFromString")
SDL_JoystickGetAttached(joystick pointer #As("SDL_Joystick *")) SDL_bool #As("SDL_bool") #Foreign("SDL_JoystickGetAttached")
SDL_JoystickInstanceID(joystick pointer #As("SDL_Joystick *")) int #Foreign("SDL_JoystickInstanceID")
SDL_JoystickNumAxes(joystick pointer #As("SDL_Joystick *")) int #Foreign("SDL_JoystickNumAxes")
SDL_JoystickNumBalls(joystick pointer #As("SDL_Joystick *")) int #Foreign("SDL_JoystickNumBalls")
SDL_JoystickNumHats(joystick pointer #As("SDL_Joystick *")) int #Foreign("SDL_JoystickNumHats")
SDL_JoystickNumButtons(joystick pointer #As("SDL_Joystick *")) int #Foreign("SDL_JoystickNumButtons")
SDL_JoystickUpdate() void #Foreign("SDL_JoystickUpdate")
SDL_JoystickEventState(state int) int #Foreign("SDL_JoystickEventState")
SDL_JoystickGetAxis(joystick pointer #As("SDL_Joystick *"), axis int) short #Foreign("SDL_JoystickGetAxis")
SDL_JoystickGetAxisInitialState(joystick pointer #As("SDL_Joystick *"), axis int, state *short) SDL_bool #As("SDL_bool") #Foreign("SDL_JoystickGetAxisInitialState")
SDL_JoystickGetHat(joystick pointer #As("SDL_Joystick *"), hat int) byte #Foreign("SDL_JoystickGetHat")
SDL_JoystickGetBall(joystick pointer #As("SDL_Joystick *"), ball int, dx *int, dy *int) int #Foreign("SDL_JoystickGetBall")
SDL_JoystickGetButton(joystick pointer #As("SDL_Joystick *"), button int) byte #Foreign("SDL_JoystickGetButton")
SDL_JoystickRumble(joystick pointer #As("SDL_Joystick *"), low_frequency_rumble ushort, high_frequency_rumble ushort, duration_ms uint) int #Foreign("SDL_JoystickRumble")
SDL_JoystickClose(joystick pointer #As("SDL_Joystick *")) void #Foreign("SDL_JoystickClose")
SDL_JoystickCurrentPowerLevel(joystick pointer #As("SDL_Joystick *")) SDL_JoystickPowerLevel #As("SDL_JoystickPowerLevel") #Foreign("SDL_JoystickCurrentPowerLevel")
SDL_GameControllerType enum #Flags {
	SDL_CONTROLLER_TYPE_UNKNOWN = 0_u
	SDL_CONTROLLER_TYPE_XBOX360 = 1_u
	SDL_CONTROLLER_TYPE_XBOXONE = 2_u
	SDL_CONTROLLER_TYPE_PS3 = 3_u
	SDL_CONTROLLER_TYPE_PS4 = 4_u
	SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5_u
}
SDL_GameControllerBindType enum #Flags {
	SDL_CONTROLLER_BINDTYPE_NONE = 0_u
	SDL_CONTROLLER_BINDTYPE_BUTTON = 1_u
	SDL_CONTROLLER_BINDTYPE_AXIS = 2_u
	SDL_CONTROLLER_BINDTYPE_HAT = 3_u
}
SDL_GameControllerButtonBind_Anonymous0_Variant0 struct {
	button int
}
SDL_GameControllerButtonBind_Anonymous0_Variant1 struct {
	axis int
}
SDL_GameControllerButtonBind_Anonymous0_Variant2_Anonymous0 struct {
	hat int
	hat_mask int
}
SDL_GameControllerButtonBind_Anonymous0_Variant2 struct {
	hat SDL_GameControllerButtonBind_Anonymous0_Variant2_Anonymous0
}
SDL_GameControllerButtonBind_Anonymous0 struct {
	padding_0 uint
	padding_1 uint
}
SDL_GameControllerButtonBind struct {
	bindType SDL_GameControllerBindType
	value SDL_GameControllerButtonBind_Anonymous0
}
SDL_GameControllerAddMappingsFromRW(rw *SDL_RWops #As("SDL_RWops *"), freerw int) int #Foreign("SDL_GameControllerAddMappingsFromRW")
SDL_GameControllerAddMapping(mappingString *sbyte) int #Foreign("SDL_GameControllerAddMapping")
SDL_GameControllerNumMappings() int #Foreign("SDL_GameControllerNumMappings")
SDL_GameControllerMappingForIndex(mapping_index int) *sbyte #Foreign("SDL_GameControllerMappingForIndex")
SDL_GameControllerMappingForGUID(guid SDL_JoystickGUID #As("SDL_JoystickGUID")) *sbyte #Foreign("SDL_GameControllerMappingForGUID")
SDL_GameControllerMapping(gamecontroller pointer #As("SDL_GameController *")) *sbyte #Foreign("SDL_GameControllerMapping")
SDL_IsGameController(joystick_index int) SDL_bool #As("SDL_bool") #Foreign("SDL_IsGameController")
SDL_GameControllerNameForIndex(joystick_index int) *sbyte #Foreign("SDL_GameControllerNameForIndex")
SDL_GameControllerTypeForIndex(joystick_index int) SDL_GameControllerType #As("SDL_GameControllerType") #Foreign("SDL_GameControllerTypeForIndex")
SDL_GameControllerMappingForDeviceIndex(joystick_index int) *sbyte #Foreign("SDL_GameControllerMappingForDeviceIndex")
SDL_GameControllerOpen(joystick_index int) pointer #As("SDL_GameController *") #Foreign("SDL_GameControllerOpen")
SDL_GameControllerFromInstanceID(joyid int) pointer #As("SDL_GameController *") #Foreign("SDL_GameControllerFromInstanceID")
SDL_GameControllerFromPlayerIndex(player_index int) pointer #As("SDL_GameController *") #Foreign("SDL_GameControllerFromPlayerIndex")
SDL_GameControllerName(gamecontroller pointer #As("SDL_GameController *")) *sbyte #Foreign("SDL_GameControllerName")
SDL_GameControllerGetType(gamecontroller pointer #As("SDL_GameController *")) SDL_GameControllerType #As("SDL_GameControllerType") #Foreign("SDL_GameControllerGetType")
SDL_GameControllerGetPlayerIndex(gamecontroller pointer #As("SDL_GameController *")) int #Foreign("SDL_GameControllerGetPlayerIndex")
SDL_GameControllerSetPlayerIndex(gamecontroller pointer #As("SDL_GameController *"), player_index int) void #Foreign("SDL_GameControllerSetPlayerIndex")
SDL_GameControllerGetVendor(gamecontroller pointer #As("SDL_GameController *")) ushort #Foreign("SDL_GameControllerGetVendor")
SDL_GameControllerGetProduct(gamecontroller pointer #As("SDL_GameController *")) ushort #Foreign("SDL_GameControllerGetProduct")
SDL_GameControllerGetProductVersion(gamecontroller pointer #As("SDL_GameController *")) ushort #Foreign("SDL_GameControllerGetProductVersion")
SDL_GameControllerGetAttached(gamecontroller pointer #As("SDL_GameController *")) SDL_bool #As("SDL_bool") #Foreign("SDL_GameControllerGetAttached")
SDL_GameControllerGetJoystick(gamecontroller pointer #As("SDL_GameController *")) pointer #As("SDL_Joystick *") #Foreign("SDL_GameControllerGetJoystick")
SDL_GameControllerEventState(state int) int #Foreign("SDL_GameControllerEventState")
SDL_GameControllerUpdate() void #Foreign("SDL_GameControllerUpdate")
SDL_GameControllerAxis enum #Flags {
	SDL_CONTROLLER_AXIS_INVALID_ffigen_modified = 4294967295_u
	SDL_CONTROLLER_AXIS_LEFTX = 0_u
	SDL_CONTROLLER_AXIS_LEFTY = 1_u
	SDL_CONTROLLER_AXIS_RIGHTX = 2_u
	SDL_CONTROLLER_AXIS_RIGHTY = 3_u
	SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4_u
	SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5_u
	SDL_CONTROLLER_AXIS_MAX = 6_u
}
SDL_GameControllerGetAxisFromString(pchString *sbyte) SDL_GameControllerAxis #As("SDL_GameControllerAxis") #Foreign("SDL_GameControllerGetAxisFromString")
SDL_GameControllerGetStringForAxis(axis SDL_GameControllerAxis #As("SDL_GameControllerAxis")) *sbyte #Foreign("SDL_GameControllerGetStringForAxis")
SDL_GameControllerGetBindForAxis(gamecontroller pointer #As("SDL_GameController *"), axis SDL_GameControllerAxis #As("SDL_GameControllerAxis")) SDL_GameControllerButtonBind #As("SDL_GameControllerButtonBind") #Foreign("SDL_GameControllerGetBindForAxis")
SDL_GameControllerGetAxis(gamecontroller pointer #As("SDL_GameController *"), axis SDL_GameControllerAxis #As("SDL_GameControllerAxis")) short #Foreign("SDL_GameControllerGetAxis")
SDL_GameControllerButton enum #Flags {
	SDL_CONTROLLER_BUTTON_INVALID_ffigen_modified = 4294967295_u
	SDL_CONTROLLER_BUTTON_A = 0_u
	SDL_CONTROLLER_BUTTON_B = 1_u
	SDL_CONTROLLER_BUTTON_X = 2_u
	SDL_CONTROLLER_BUTTON_Y = 3_u
	SDL_CONTROLLER_BUTTON_BACK = 4_u
	SDL_CONTROLLER_BUTTON_GUIDE = 5_u
	SDL_CONTROLLER_BUTTON_START = 6_u
	SDL_CONTROLLER_BUTTON_LEFTSTICK = 7_u
	SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8_u
	SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9_u
	SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10_u
	SDL_CONTROLLER_BUTTON_DPAD_UP = 11_u
	SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12_u
	SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13_u
	SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14_u
	SDL_CONTROLLER_BUTTON_MAX = 15_u
}
SDL_GameControllerGetButtonFromString(pchString *sbyte) SDL_GameControllerButton #As("SDL_GameControllerButton") #Foreign("SDL_GameControllerGetButtonFromString")
SDL_GameControllerGetStringForButton(button SDL_GameControllerButton #As("SDL_GameControllerButton")) *sbyte #Foreign("SDL_GameControllerGetStringForButton")
SDL_GameControllerGetBindForButton(gamecontroller pointer #As("SDL_GameController *"), button SDL_GameControllerButton #As("SDL_GameControllerButton")) SDL_GameControllerButtonBind #As("SDL_GameControllerButtonBind") #Foreign("SDL_GameControllerGetBindForButton")
SDL_GameControllerGetButton(gamecontroller pointer #As("SDL_GameController *"), button SDL_GameControllerButton #As("SDL_GameControllerButton")) byte #Foreign("SDL_GameControllerGetButton")
SDL_GameControllerRumble(gamecontroller pointer #As("SDL_GameController *"), low_frequency_rumble ushort, high_frequency_rumble ushort, duration_ms uint) int #Foreign("SDL_GameControllerRumble")
SDL_GameControllerClose(gamecontroller pointer #As("SDL_GameController *")) void #Foreign("SDL_GameControllerClose")
SDL_TouchDeviceType enum #Flags {
	SDL_TOUCH_DEVICE_INVALID_ffigen_modified = 4294967295_u
	SDL_TOUCH_DEVICE_DIRECT = 0_u
	SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1_u
	SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2_u
}
SDL_Finger struct {
	id long
	x float
	y float
	pressure float
}
SDL_GetNumTouchDevices() int #Foreign("SDL_GetNumTouchDevices")
SDL_GetTouchDevice(index int) long #Foreign("SDL_GetTouchDevice")
SDL_GetTouchDeviceType(touchID long) SDL_TouchDeviceType #As("SDL_TouchDeviceType") #Foreign("SDL_GetTouchDeviceType")
SDL_GetNumTouchFingers(touchID long) int #Foreign("SDL_GetNumTouchFingers")
SDL_GetTouchFinger(touchID long, index int) *SDL_Finger #As("SDL_Finger *") #Foreign("SDL_GetTouchFinger")
SDL_RecordGesture(touchId long) int #Foreign("SDL_RecordGesture")
SDL_SaveAllDollarTemplates(dst *SDL_RWops #As("SDL_RWops *")) int #Foreign("SDL_SaveAllDollarTemplates")
SDL_SaveDollarTemplate(gestureId long, dst *SDL_RWops #As("SDL_RWops *")) int #Foreign("SDL_SaveDollarTemplate")
SDL_LoadDollarTemplates(touchId long, src *SDL_RWops #As("SDL_RWops *")) int #Foreign("SDL_LoadDollarTemplates")
SDL_EventType enum #Flags {
	SDL_FIRSTEVENT = 0_u
	SDL_QUIT = 256_u
	SDL_APP_TERMINATING = 257_u
	SDL_APP_LOWMEMORY = 258_u
	SDL_APP_WILLENTERBACKGROUND = 259_u
	SDL_APP_DIDENTERBACKGROUND = 260_u
	SDL_APP_WILLENTERFOREGROUND = 261_u
	SDL_APP_DIDENTERFOREGROUND = 262_u
	SDL_DISPLAYEVENT = 336_u
	SDL_WINDOWEVENT = 512_u
	SDL_SYSWMEVENT = 513_u
	SDL_KEYDOWN = 768_u
	SDL_KEYUP = 769_u
	SDL_TEXTEDITING = 770_u
	SDL_TEXTINPUT = 771_u
	SDL_KEYMAPCHANGED = 772_u
	SDL_MOUSEMOTION = 1024_u
	SDL_MOUSEBUTTONDOWN = 1025_u
	SDL_MOUSEBUTTONUP = 1026_u
	SDL_MOUSEWHEEL = 1027_u
	SDL_JOYAXISMOTION = 1536_u
	SDL_JOYBALLMOTION = 1537_u
	SDL_JOYHATMOTION = 1538_u
	SDL_JOYBUTTONDOWN = 1539_u
	SDL_JOYBUTTONUP = 1540_u
	SDL_JOYDEVICEADDED = 1541_u
	SDL_JOYDEVICEREMOVED = 1542_u
	SDL_CONTROLLERAXISMOTION = 1616_u
	SDL_CONTROLLERBUTTONDOWN = 1617_u
	SDL_CONTROLLERBUTTONUP = 1618_u
	SDL_CONTROLLERDEVICEADDED = 1619_u
	SDL_CONTROLLERDEVICEREMOVED = 1620_u
	SDL_CONTROLLERDEVICEREMAPPED = 1621_u
	SDL_FINGERDOWN = 1792_u
	SDL_FINGERUP = 1793_u
	SDL_FINGERMOTION = 1794_u
	SDL_DOLLARGESTURE = 2048_u
	SDL_DOLLARRECORD = 2049_u
	SDL_MULTIGESTURE = 2050_u
	SDL_CLIPBOARDUPDATE = 2304_u
	SDL_DROPFILE = 4096_u
	SDL_DROPTEXT = 4097_u
	SDL_DROPBEGIN = 4098_u
	SDL_DROPCOMPLETE = 4099_u
	SDL_AUDIODEVICEADDED = 4352_u
	SDL_AUDIODEVICEREMOVED = 4353_u
	SDL_SENSORUPDATE = 4608_u
	SDL_RENDER_TARGETS_RESET = 8192_u
	SDL_RENDER_DEVICE_RESET = 8193_u
	SDL_USEREVENT = 32768_u
	SDL_LASTEVENT = 65535_u
}
SDL_CommonEvent struct {
	type uint
	timestamp uint
}
SDL_DisplayEvent struct {
	type uint
	timestamp uint
	display uint
	event byte
	padding1 byte
	padding2 byte
	padding3 byte
	data1 int
}
SDL_WindowEvent struct {
	type uint
	timestamp uint
	windowID uint
	event byte
	padding1 byte
	padding2 byte
	padding3 byte
	data1 int
	data2 int
}
SDL_KeyboardEvent struct {
	type uint
	timestamp uint
	windowID uint
	state byte
	repeat byte
	padding2 byte
	padding3 byte
	keysym SDL_Keysym
}
SDL_TextEditingEvent struct {
	type uint
	timestamp uint
	windowID uint
	text_0 sbyte
	text_1 sbyte
	text_2 sbyte
	text_3 sbyte
	text_4 sbyte
	text_5 sbyte
	text_6 sbyte
	text_7 sbyte
	text_8 sbyte
	text_9 sbyte
	text_10 sbyte
	text_11 sbyte
	text_12 sbyte
	text_13 sbyte
	text_14 sbyte
	text_15 sbyte
	text_16 sbyte
	text_17 sbyte
	text_18 sbyte
	text_19 sbyte
	text_20 sbyte
	text_21 sbyte
	text_22 sbyte
	text_23 sbyte
	text_24 sbyte
	text_25 sbyte
	text_26 sbyte
	text_27 sbyte
	text_28 sbyte
	text_29 sbyte
	text_30 sbyte
	text_31 sbyte
	start int
	length int
}
SDL_TextInputEvent struct {
	type uint
	timestamp uint
	windowID uint
	text_0 sbyte
	text_1 sbyte
	text_2 sbyte
	text_3 sbyte
	text_4 sbyte
	text_5 sbyte
	text_6 sbyte
	text_7 sbyte
	text_8 sbyte
	text_9 sbyte
	text_10 sbyte
	text_11 sbyte
	text_12 sbyte
	text_13 sbyte
	text_14 sbyte
	text_15 sbyte
	text_16 sbyte
	text_17 sbyte
	text_18 sbyte
	text_19 sbyte
	text_20 sbyte
	text_21 sbyte
	text_22 sbyte
	text_23 sbyte
	text_24 sbyte
	text_25 sbyte
	text_26 sbyte
	text_27 sbyte
	text_28 sbyte
	text_29 sbyte
	text_30 sbyte
	text_31 sbyte
}
SDL_MouseMotionEvent struct {
	type uint
	timestamp uint
	windowID uint
	which uint
	state uint
	x int
	y int
	xrel int
	yrel int
}
SDL_MouseButtonEvent struct {
	type uint
	timestamp uint
	windowID uint
	which uint
	button byte
	state byte
	clicks byte
	padding1 byte
	x int
	y int
}
SDL_MouseWheelEvent struct {
	type uint
	timestamp uint
	windowID uint
	which uint
	x int
	y int
	direction uint
}
SDL_JoyAxisEvent struct {
	type uint
	timestamp uint
	which int
	axis byte
	padding1 byte
	padding2 byte
	padding3 byte
	value short
	padding4 ushort
}
SDL_JoyBallEvent struct {
	type uint
	timestamp uint
	which int
	ball byte
	padding1 byte
	padding2 byte
	padding3 byte
	xrel short
	yrel short
}
SDL_JoyHatEvent struct {
	type uint
	timestamp uint
	which int
	hat byte
	value byte
	padding1 byte
	padding2 byte
}
SDL_JoyButtonEvent struct {
	type uint
	timestamp uint
	which int
	button byte
	state byte
	padding1 byte
	padding2 byte
}
SDL_JoyDeviceEvent struct {
	type uint
	timestamp uint
	which int
}
SDL_ControllerAxisEvent struct {
	type uint
	timestamp uint
	which int
	axis byte
	padding1 byte
	padding2 byte
	padding3 byte
	value short
	padding4 ushort
}
SDL_ControllerButtonEvent struct {
	type uint
	timestamp uint
	which int
	button byte
	state byte
	padding1 byte
	padding2 byte
}
SDL_ControllerDeviceEvent struct {
	type uint
	timestamp uint
	which int
}
SDL_AudioDeviceEvent struct {
	type uint
	timestamp uint
	which uint
	iscapture byte
	padding1 byte
	padding2 byte
	padding3 byte
}
SDL_TouchFingerEvent struct {
	type uint
	timestamp uint
	touchId long
	fingerId long
	x float
	y float
	dx float
	dy float
	pressure float
	windowID uint
}
SDL_MultiGestureEvent struct {
	type uint
	timestamp uint
	touchId long
	dTheta float
	dDist float
	x float
	y float
	numFingers ushort
	padding ushort
}
SDL_DollarGestureEvent struct {
	type uint
	timestamp uint
	touchId long
	gestureId long
	numFingers uint
	error float
	x float
	y float
}
SDL_DropEvent struct {
	type uint
	timestamp uint
	file *sbyte
	windowID uint
}
SDL_SensorEvent struct {
	type uint
	timestamp uint
	which int
	data_0 float
	data_1 float
	data_2 float
	data_3 float
	data_4 float
	data_5 float
}
SDL_QuitEvent struct {
	type uint
	timestamp uint
}
SDL_OSEvent struct {
	type uint
	timestamp uint
}
SDL_UserEvent struct {
	type uint
	timestamp uint
	windowID uint
	code int
	data1 pointer
	data2 pointer
}
SDL_SysWMEvent struct {
	type uint
	timestamp uint
	msg pointer
}
SDL_Event_Variant0 struct {
	type uint
}
SDL_Event_Variant1 struct {
	common SDL_CommonEvent
}
SDL_Event_Variant2 struct {
	display SDL_DisplayEvent
}
SDL_Event_Variant3 struct {
	window SDL_WindowEvent
}
SDL_Event_Variant4 struct {
	key SDL_KeyboardEvent
}
SDL_Event_Variant5 struct {
	edit SDL_TextEditingEvent
}
SDL_Event_Variant6 struct {
	text SDL_TextInputEvent
}
SDL_Event_Variant7 struct {
	motion SDL_MouseMotionEvent
}
SDL_Event_Variant8 struct {
	button SDL_MouseButtonEvent
}
SDL_Event_Variant9 struct {
	wheel SDL_MouseWheelEvent
}
SDL_Event_Variant10 struct {
	jaxis SDL_JoyAxisEvent
}
SDL_Event_Variant11 struct {
	jball SDL_JoyBallEvent
}
SDL_Event_Variant12 struct {
	jhat SDL_JoyHatEvent
}
SDL_Event_Variant13 struct {
	jbutton SDL_JoyButtonEvent
}
SDL_Event_Variant14 struct {
	jdevice SDL_JoyDeviceEvent
}
SDL_Event_Variant15 struct {
	caxis SDL_ControllerAxisEvent
}
SDL_Event_Variant16 struct {
	cbutton SDL_ControllerButtonEvent
}
SDL_Event_Variant17 struct {
	cdevice SDL_ControllerDeviceEvent
}
SDL_Event_Variant18 struct {
	adevice SDL_AudioDeviceEvent
}
SDL_Event_Variant19 struct {
	sensor SDL_SensorEvent
}
SDL_Event_Variant20 struct {
	quit SDL_QuitEvent
}
SDL_Event_Variant21 struct {
	user SDL_UserEvent
}
SDL_Event_Variant22 struct {
	syswm SDL_SysWMEvent
}
SDL_Event_Variant23 struct {
	tfinger SDL_TouchFingerEvent
}
SDL_Event_Variant24 struct {
	mgesture SDL_MultiGestureEvent
}
SDL_Event_Variant25 struct {
	dgesture SDL_DollarGestureEvent
}
SDL_Event_Variant26 struct {
	drop SDL_DropEvent
}
SDL_Event_Variant27 struct {
	padding_0 byte
	padding_1 byte
	padding_2 byte
	padding_3 byte
	padding_4 byte
	padding_5 byte
	padding_6 byte
	padding_7 byte
	padding_8 byte
	padding_9 byte
	padding_10 byte
	padding_11 byte
	padding_12 byte
	padding_13 byte
	padding_14 byte
	padding_15 byte
	padding_16 byte
	padding_17 byte
	padding_18 byte
	padding_19 byte
	padding_20 byte
	padding_21 byte
	padding_22 byte
	padding_23 byte
	padding_24 byte
	padding_25 byte
	padding_26 byte
	padding_27 byte
	padding_28 byte
	padding_29 byte
	padding_30 byte
	padding_31 byte
	padding_32 byte
	padding_33 byte
	padding_34 byte
	padding_35 byte
	padding_36 byte
	padding_37 byte
	padding_38 byte
	padding_39 byte
	padding_40 byte
	padding_41 byte
	padding_42 byte
	padding_43 byte
	padding_44 byte
	padding_45 byte
	padding_46 byte
	padding_47 byte
	padding_48 byte
	padding_49 byte
	padding_50 byte
	padding_51 byte
	padding_52 byte
	padding_53 byte
	padding_54 byte
	padding_55 byte
}
SDL_Event struct {
	padding_0 ulong
	padding_1 ulong
	padding_2 ulong
	padding_3 ulong
	padding_4 ulong
	padding_5 ulong
	padding_6 ulong
}
SDL_PumpEvents() void #Foreign("SDL_PumpEvents")
SDL_eventaction enum #Flags {
	SDL_ADDEVENT = 0_u
	SDL_PEEKEVENT = 1_u
	SDL_GETEVENT = 2_u
}
SDL_PeepEvents(events *SDL_Event #As("SDL_Event *"), numevents int, action SDL_eventaction #As("SDL_eventaction"), minType uint, maxType uint) int #Foreign("SDL_PeepEvents")
SDL_HasEvent(type uint) SDL_bool #As("SDL_bool") #Foreign("SDL_HasEvent")
SDL_HasEvents(minType uint, maxType uint) SDL_bool #As("SDL_bool") #Foreign("SDL_HasEvents")
SDL_FlushEvent(type uint) void #Foreign("SDL_FlushEvent")
SDL_FlushEvents(minType uint, maxType uint) void #Foreign("SDL_FlushEvents")
SDL_PollEvent(event *SDL_Event #As("SDL_Event *")) int #Foreign("SDL_PollEvent")
SDL_WaitEvent(event *SDL_Event #As("SDL_Event *")) int #Foreign("SDL_WaitEvent")
SDL_WaitEventTimeout(event *SDL_Event #As("SDL_Event *"), timeout int) int #Foreign("SDL_WaitEventTimeout")
SDL_PushEvent(event *SDL_Event #As("SDL_Event *")) int #Foreign("SDL_PushEvent")
SDL_SetEventFilter(filter pointer #As("SDL_EventFilter"), userdata pointer) void #Foreign("SDL_SetEventFilter")
SDL_GetEventFilter(filter *pointer #As("SDL_EventFilter *"), userdata *pointer) SDL_bool #As("SDL_bool") #Foreign("SDL_GetEventFilter")
SDL_AddEventWatch(filter pointer #As("SDL_EventFilter"), userdata pointer) void #Foreign("SDL_AddEventWatch")
SDL_DelEventWatch(filter pointer #As("SDL_EventFilter"), userdata pointer) void #Foreign("SDL_DelEventWatch")
SDL_FilterEvents(filter pointer #As("SDL_EventFilter"), userdata pointer) void #Foreign("SDL_FilterEvents")
SDL_EventState(type uint, state int) byte #Foreign("SDL_EventState")
SDL_RegisterEvents(numevents int) uint #Foreign("SDL_RegisterEvents")
SDL_GetBasePath() *sbyte #Foreign("SDL_GetBasePath")
SDL_GetPrefPath(org *sbyte, app *sbyte) *sbyte #Foreign("SDL_GetPrefPath")
SDL_HapticDirection struct {
	type byte
	dir_0 int
	dir_1 int
	dir_2 int
}
SDL_HapticConstant struct {
	type ushort
	direction SDL_HapticDirection
	length uint
	delay ushort
	button ushort
	interval ushort
	level short
	attack_length ushort
	attack_level ushort
	fade_length ushort
	fade_level ushort
}
SDL_HapticPeriodic struct {
	type ushort
	direction SDL_HapticDirection
	length uint
	delay ushort
	button ushort
	interval ushort
	period ushort
	magnitude short
	offset short
	phase ushort
	attack_length ushort
	attack_level ushort
	fade_length ushort
	fade_level ushort
}
SDL_HapticCondition struct {
	type ushort
	direction SDL_HapticDirection
	length uint
	delay ushort
	button ushort
	interval ushort
	right_sat_0 ushort
	right_sat_1 ushort
	right_sat_2 ushort
	left_sat_0 ushort
	left_sat_1 ushort
	left_sat_2 ushort
	right_coeff_0 short
	right_coeff_1 short
	right_coeff_2 short
	left_coeff_0 short
	left_coeff_1 short
	left_coeff_2 short
	deadband_0 ushort
	deadband_1 ushort
	deadband_2 ushort
	center_0 short
	center_1 short
	center_2 short
}
SDL_HapticRamp struct {
	type ushort
	direction SDL_HapticDirection
	length uint
	delay ushort
	button ushort
	interval ushort
	start short
	end short
	attack_length ushort
	attack_level ushort
	fade_length ushort
	fade_level ushort
}
SDL_HapticLeftRight struct {
	type ushort
	length uint
	large_magnitude ushort
	small_magnitude ushort
}
SDL_HapticCustom struct {
	type ushort
	direction SDL_HapticDirection
	length uint
	delay ushort
	button ushort
	interval ushort
	channels byte
	period ushort
	samples ushort
	data *ushort
	attack_length ushort
	attack_level ushort
	fade_length ushort
	fade_level ushort
}
SDL_HapticEffect_Variant0 struct {
	type ushort
}
SDL_HapticEffect_Variant1 struct {
	constant SDL_HapticConstant
}
SDL_HapticEffect_Variant2 struct {
	periodic SDL_HapticPeriodic
}
SDL_HapticEffect_Variant3 struct {
	condition SDL_HapticCondition
}
SDL_HapticEffect_Variant4 struct {
	ramp SDL_HapticRamp
}
SDL_HapticEffect_Variant5 struct {
	leftright SDL_HapticLeftRight
}
SDL_HapticEffect_Variant6 struct {
	custom SDL_HapticCustom
}
SDL_HapticEffect struct {
	padding_0 ulong
	padding_1 ulong
	padding_2 ulong
	padding_3 ulong
	padding_4 ulong
	padding_5 ulong
	padding_6 ulong
	padding_7 ulong
	padding_8 ulong
}
SDL_NumHaptics() int #Foreign("SDL_NumHaptics")
SDL_HapticName(device_index int) *sbyte #Foreign("SDL_HapticName")
SDL_HapticOpen(device_index int) pointer #As("SDL_Haptic *") #Foreign("SDL_HapticOpen")
SDL_HapticOpened(device_index int) int #Foreign("SDL_HapticOpened")
SDL_HapticIndex(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticIndex")
SDL_MouseIsHaptic() int #Foreign("SDL_MouseIsHaptic")
SDL_HapticOpenFromMouse() pointer #As("SDL_Haptic *") #Foreign("SDL_HapticOpenFromMouse")
SDL_JoystickIsHaptic(joystick pointer #As("SDL_Joystick *")) int #Foreign("SDL_JoystickIsHaptic")
SDL_HapticOpenFromJoystick(joystick pointer #As("SDL_Joystick *")) pointer #As("SDL_Haptic *") #Foreign("SDL_HapticOpenFromJoystick")
SDL_HapticClose(haptic pointer #As("SDL_Haptic *")) void #Foreign("SDL_HapticClose")
SDL_HapticNumEffects(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticNumEffects")
SDL_HapticNumEffectsPlaying(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticNumEffectsPlaying")
SDL_HapticQuery(haptic pointer #As("SDL_Haptic *")) uint #Foreign("SDL_HapticQuery")
SDL_HapticNumAxes(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticNumAxes")
SDL_HapticEffectSupported(haptic pointer #As("SDL_Haptic *"), effect *SDL_HapticEffect #As("SDL_HapticEffect *")) int #Foreign("SDL_HapticEffectSupported")
SDL_HapticNewEffect(haptic pointer #As("SDL_Haptic *"), effect *SDL_HapticEffect #As("SDL_HapticEffect *")) int #Foreign("SDL_HapticNewEffect")
SDL_HapticUpdateEffect(haptic pointer #As("SDL_Haptic *"), effect int, data *SDL_HapticEffect #As("SDL_HapticEffect *")) int #Foreign("SDL_HapticUpdateEffect")
SDL_HapticRunEffect(haptic pointer #As("SDL_Haptic *"), effect int, iterations uint) int #Foreign("SDL_HapticRunEffect")
SDL_HapticStopEffect(haptic pointer #As("SDL_Haptic *"), effect int) int #Foreign("SDL_HapticStopEffect")
SDL_HapticDestroyEffect(haptic pointer #As("SDL_Haptic *"), effect int) void #Foreign("SDL_HapticDestroyEffect")
SDL_HapticGetEffectStatus(haptic pointer #As("SDL_Haptic *"), effect int) int #Foreign("SDL_HapticGetEffectStatus")
SDL_HapticSetGain(haptic pointer #As("SDL_Haptic *"), gain int) int #Foreign("SDL_HapticSetGain")
SDL_HapticSetAutocenter(haptic pointer #As("SDL_Haptic *"), autocenter int) int #Foreign("SDL_HapticSetAutocenter")
SDL_HapticPause(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticPause")
SDL_HapticUnpause(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticUnpause")
SDL_HapticStopAll(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticStopAll")
SDL_HapticRumbleSupported(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticRumbleSupported")
SDL_HapticRumbleInit(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticRumbleInit")
SDL_HapticRumblePlay(haptic pointer #As("SDL_Haptic *"), strength float, length uint) int #Foreign("SDL_HapticRumblePlay")
SDL_HapticRumbleStop(haptic pointer #As("SDL_Haptic *")) int #Foreign("SDL_HapticRumbleStop")
SDL_HintPriority enum #Flags {
	SDL_HINT_DEFAULT = 0_u
	SDL_HINT_NORMAL = 1_u
	SDL_HINT_OVERRIDE = 2_u
}
SDL_SetHintWithPriority(name *sbyte, value *sbyte, priority SDL_HintPriority #As("SDL_HintPriority")) SDL_bool #As("SDL_bool") #Foreign("SDL_SetHintWithPriority")
SDL_SetHint(name *sbyte, value *sbyte) SDL_bool #As("SDL_bool") #Foreign("SDL_SetHint")
SDL_GetHint(name *sbyte) *sbyte #Foreign("SDL_GetHint")
SDL_GetHintBoolean(name *sbyte, default_value SDL_bool #As("SDL_bool")) SDL_bool #As("SDL_bool") #Foreign("SDL_GetHintBoolean")
SDL_AddHintCallback(name *sbyte, callback pointer #As("SDL_HintCallback"), userdata pointer) void #Foreign("SDL_AddHintCallback")
SDL_DelHintCallback(name *sbyte, callback pointer #As("SDL_HintCallback"), userdata pointer) void #Foreign("SDL_DelHintCallback")
SDL_ClearHints() void #Foreign("SDL_ClearHints")
SDL_LoadObject(sofile *sbyte) pointer #Foreign("SDL_LoadObject")
SDL_LoadFunction(handle pointer, name *sbyte) pointer #Foreign("SDL_LoadFunction")
SDL_UnloadObject(handle pointer) void #Foreign("SDL_UnloadObject")
SDL_LogCategory enum #Flags {
	SDL_LOG_CATEGORY_APPLICATION = 0_u
	SDL_LOG_CATEGORY_ERROR = 1_u
	SDL_LOG_CATEGORY_ASSERT = 2_u
	SDL_LOG_CATEGORY_SYSTEM = 3_u
	SDL_LOG_CATEGORY_AUDIO = 4_u
	SDL_LOG_CATEGORY_VIDEO = 5_u
	SDL_LOG_CATEGORY_RENDER = 6_u
	SDL_LOG_CATEGORY_INPUT = 7_u
	SDL_LOG_CATEGORY_TEST = 8_u
	SDL_LOG_CATEGORY_RESERVED1 = 9_u
	SDL_LOG_CATEGORY_RESERVED2 = 10_u
	SDL_LOG_CATEGORY_RESERVED3 = 11_u
	SDL_LOG_CATEGORY_RESERVED4 = 12_u
	SDL_LOG_CATEGORY_RESERVED5 = 13_u
	SDL_LOG_CATEGORY_RESERVED6 = 14_u
	SDL_LOG_CATEGORY_RESERVED7 = 15_u
	SDL_LOG_CATEGORY_RESERVED8 = 16_u
	SDL_LOG_CATEGORY_RESERVED9 = 17_u
	SDL_LOG_CATEGORY_RESERVED10 = 18_u
	SDL_LOG_CATEGORY_CUSTOM = 19_u
}
SDL_LogPriority enum #Flags {
	SDL_LOG_PRIORITY_VERBOSE = 1_u
	SDL_LOG_PRIORITY_DEBUG = 2_u
	SDL_LOG_PRIORITY_INFO = 3_u
	SDL_LOG_PRIORITY_WARN = 4_u
	SDL_LOG_PRIORITY_ERROR = 5_u
	SDL_LOG_PRIORITY_CRITICAL = 6_u
	SDL_NUM_LOG_PRIORITIES = 7_u
}
SDL_LogSetAllPriority(priority SDL_LogPriority #As("SDL_LogPriority")) void #Foreign("SDL_LogSetAllPriority")
SDL_LogSetPriority(category int, priority SDL_LogPriority #As("SDL_LogPriority")) void #Foreign("SDL_LogSetPriority")
SDL_LogGetPriority(category int) SDL_LogPriority #As("SDL_LogPriority") #Foreign("SDL_LogGetPriority")
SDL_LogResetPriorities() void #Foreign("SDL_LogResetPriorities")
SDL_Log(fmt *sbyte) void #VarArgs #Foreign("SDL_Log")
SDL_LogVerbose(category int, fmt *sbyte) void #VarArgs #Foreign("SDL_LogVerbose")
SDL_LogDebug(category int, fmt *sbyte) void #VarArgs #Foreign("SDL_LogDebug")
SDL_LogInfo(category int, fmt *sbyte) void #VarArgs #Foreign("SDL_LogInfo")
SDL_LogWarn(category int, fmt *sbyte) void #VarArgs #Foreign("SDL_LogWarn")
SDL_LogError(category int, fmt *sbyte) void #VarArgs #Foreign("SDL_LogError")
SDL_LogCritical(category int, fmt *sbyte) void #VarArgs #Foreign("SDL_LogCritical")
SDL_LogMessage(category int, priority SDL_LogPriority #As("SDL_LogPriority"), fmt *sbyte) void #VarArgs #Foreign("SDL_LogMessage")
SDL_LogMessageV(category int, priority SDL_LogPriority #As("SDL_LogPriority"), fmt *sbyte, ap *__va_list_tag #As("va_list")) void #Foreign("SDL_LogMessageV")
SDL_LogGetOutputFunction(callback *pointer #As("SDL_LogOutputFunction *"), userdata *pointer) void #Foreign("SDL_LogGetOutputFunction")
SDL_LogSetOutputFunction(callback pointer #As("SDL_LogOutputFunction"), userdata pointer) void #Foreign("SDL_LogSetOutputFunction")
SDL_MessageBoxFlags enum #Flags {
	SDL_MESSAGEBOX_ERROR = 16_u
	SDL_MESSAGEBOX_WARNING = 32_u
	SDL_MESSAGEBOX_INFORMATION = 64_u
	SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128_u
	SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256_u
}
SDL_MessageBoxButtonFlags enum #Flags {
	SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1_u
	SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2_u
}
SDL_MessageBoxButtonData struct {
	flags uint
	buttonid int
	text *sbyte
}
SDL_MessageBoxColor struct {
	r byte
	g byte
	b byte
}
SDL_MessageBoxColorType enum #Flags {
	SDL_MESSAGEBOX_COLOR_BACKGROUND = 0_u
	SDL_MESSAGEBOX_COLOR_TEXT = 1_u
	SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2_u
	SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3_u
	SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4_u
	SDL_MESSAGEBOX_COLOR_MAX = 5_u
}
SDL_MessageBoxColorScheme struct {
	colors_0 SDL_MessageBoxColor
	colors_1 SDL_MessageBoxColor
	colors_2 SDL_MessageBoxColor
	colors_3 SDL_MessageBoxColor
	colors_4 SDL_MessageBoxColor
}
SDL_MessageBoxData struct {
	flags uint
	window pointer
	title *sbyte
	message *sbyte
	numbuttons int
	buttons *SDL_MessageBoxButtonData
	colorScheme *SDL_MessageBoxColorScheme
}
SDL_ShowMessageBox(messageboxdata *SDL_MessageBoxData #As("const SDL_MessageBoxData *"), buttonid *int) int #Foreign("SDL_ShowMessageBox")
SDL_ShowSimpleMessageBox(flags uint, title *sbyte, message *sbyte, window pointer #As("SDL_Window *")) int #Foreign("SDL_ShowSimpleMessageBox")
SDL_Metal_CreateView(window pointer #As("SDL_Window *")) pointer #Foreign("SDL_Metal_CreateView")
SDL_Metal_DestroyView(view pointer) void #Foreign("SDL_Metal_DestroyView")
SDL_PowerState enum #Flags {
	SDL_POWERSTATE_UNKNOWN = 0_u
	SDL_POWERSTATE_ON_BATTERY = 1_u
	SDL_POWERSTATE_NO_BATTERY = 2_u
	SDL_POWERSTATE_CHARGING = 3_u
	SDL_POWERSTATE_CHARGED = 4_u
}
SDL_GetPowerInfo(secs *int, pct *int) SDL_PowerState #As("SDL_PowerState") #Foreign("SDL_GetPowerInfo")
SDL_RendererFlags enum #Flags {
	SDL_RENDERER_SOFTWARE = 1_u
	SDL_RENDERER_ACCELERATED = 2_u
	SDL_RENDERER_PRESENTVSYNC = 4_u
	SDL_RENDERER_TARGETTEXTURE = 8_u
}
SDL_RendererInfo struct {
	name *sbyte
	flags uint
	num_texture_formats uint
	texture_formats_0 uint
	texture_formats_1 uint
	texture_formats_2 uint
	texture_formats_3 uint
	texture_formats_4 uint
	texture_formats_5 uint
	texture_formats_6 uint
	texture_formats_7 uint
	texture_formats_8 uint
	texture_formats_9 uint
	texture_formats_10 uint
	texture_formats_11 uint
	texture_formats_12 uint
	texture_formats_13 uint
	texture_formats_14 uint
	texture_formats_15 uint
	max_texture_width int
	max_texture_height int
}
SDL_ScaleMode enum #Flags {
	SDL_ScaleModeNearest = 0_u
	SDL_ScaleModeLinear = 1_u
	SDL_ScaleModeBest = 2_u
}
SDL_TextureAccess enum #Flags {
	SDL_TEXTUREACCESS_STATIC = 0_u
	SDL_TEXTUREACCESS_STREAMING = 1_u
	SDL_TEXTUREACCESS_TARGET = 2_u
}
SDL_TextureModulate enum #Flags {
	SDL_TEXTUREMODULATE_NONE = 0_u
	SDL_TEXTUREMODULATE_COLOR = 1_u
	SDL_TEXTUREMODULATE_ALPHA = 2_u
}
SDL_RendererFlip enum #Flags {
	SDL_FLIP_NONE = 0_u
	SDL_FLIP_HORIZONTAL = 1_u
	SDL_FLIP_VERTICAL = 2_u
}
SDL_GetNumRenderDrivers() int #Foreign("SDL_GetNumRenderDrivers")
SDL_GetRenderDriverInfo(index int, info *SDL_RendererInfo #As("SDL_RendererInfo *")) int #Foreign("SDL_GetRenderDriverInfo")
SDL_CreateWindowAndRenderer(width int, height int, window_flags uint, window *pointer #As("SDL_Window **"), renderer *pointer #As("SDL_Renderer **")) int #Foreign("SDL_CreateWindowAndRenderer")
SDL_CreateRenderer(window pointer #As("SDL_Window *"), index int, flags uint) pointer #As("SDL_Renderer *") #Foreign("SDL_CreateRenderer")
SDL_CreateSoftwareRenderer(surface *SDL_Surface #As("SDL_Surface *")) pointer #As("SDL_Renderer *") #Foreign("SDL_CreateSoftwareRenderer")
SDL_GetRenderer(window pointer #As("SDL_Window *")) pointer #As("SDL_Renderer *") #Foreign("SDL_GetRenderer")
SDL_GetRendererInfo(renderer pointer #As("SDL_Renderer *"), info *SDL_RendererInfo #As("SDL_RendererInfo *")) int #Foreign("SDL_GetRendererInfo")
SDL_GetRendererOutputSize(renderer pointer #As("SDL_Renderer *"), w *int, h *int) int #Foreign("SDL_GetRendererOutputSize")
SDL_CreateTexture(renderer pointer #As("SDL_Renderer *"), format uint, access int, w int, h int) pointer #As("SDL_Texture *") #Foreign("SDL_CreateTexture")
SDL_CreateTextureFromSurface(renderer pointer #As("SDL_Renderer *"), surface *SDL_Surface #As("SDL_Surface *")) pointer #As("SDL_Texture *") #Foreign("SDL_CreateTextureFromSurface")
SDL_QueryTexture(texture pointer #As("SDL_Texture *"), format *uint, access *int, w *int, h *int) int #Foreign("SDL_QueryTexture")
SDL_SetTextureColorMod(texture pointer #As("SDL_Texture *"), r byte, g byte, b byte) int #Foreign("SDL_SetTextureColorMod")
SDL_GetTextureColorMod(texture pointer #As("SDL_Texture *"), r *byte, g *byte, b *byte) int #Foreign("SDL_GetTextureColorMod")
SDL_SetTextureAlphaMod(texture pointer #As("SDL_Texture *"), alpha byte) int #Foreign("SDL_SetTextureAlphaMod")
SDL_GetTextureAlphaMod(texture pointer #As("SDL_Texture *"), alpha *byte) int #Foreign("SDL_GetTextureAlphaMod")
SDL_SetTextureBlendMode(texture pointer #As("SDL_Texture *"), blendMode SDL_BlendMode #As("SDL_BlendMode")) int #Foreign("SDL_SetTextureBlendMode")
SDL_GetTextureBlendMode(texture pointer #As("SDL_Texture *"), blendMode *SDL_BlendMode #As("SDL_BlendMode *")) int #Foreign("SDL_GetTextureBlendMode")
SDL_SetTextureScaleMode(texture pointer #As("SDL_Texture *"), scaleMode SDL_ScaleMode #As("SDL_ScaleMode")) int #Foreign("SDL_SetTextureScaleMode")
SDL_GetTextureScaleMode(texture pointer #As("SDL_Texture *"), scaleMode *SDL_ScaleMode #As("SDL_ScaleMode *")) int #Foreign("SDL_GetTextureScaleMode")
SDL_UpdateTexture(texture pointer #As("SDL_Texture *"), rect *SDL_Rect #As("const SDL_Rect *"), pixels pointer, pitch int) int #Foreign("SDL_UpdateTexture")
SDL_UpdateYUVTexture(texture pointer #As("SDL_Texture *"), rect *SDL_Rect #As("const SDL_Rect *"), Yplane *byte, Ypitch int, Uplane *byte, Upitch int, Vplane *byte, Vpitch int) int #Foreign("SDL_UpdateYUVTexture")
SDL_LockTexture(texture pointer #As("SDL_Texture *"), rect *SDL_Rect #As("const SDL_Rect *"), pixels *pointer, pitch *int) int #Foreign("SDL_LockTexture")
SDL_LockTextureToSurface(texture pointer #As("SDL_Texture *"), rect *SDL_Rect #As("const SDL_Rect *"), surface **SDL_Surface #As("SDL_Surface **")) int #Foreign("SDL_LockTextureToSurface")
SDL_UnlockTexture(texture pointer #As("SDL_Texture *")) void #Foreign("SDL_UnlockTexture")
SDL_RenderTargetSupported(renderer pointer #As("SDL_Renderer *")) SDL_bool #As("SDL_bool") #Foreign("SDL_RenderTargetSupported")
SDL_SetRenderTarget(renderer pointer #As("SDL_Renderer *"), texture pointer #As("SDL_Texture *")) int #Foreign("SDL_SetRenderTarget")
SDL_GetRenderTarget(renderer pointer #As("SDL_Renderer *")) pointer #As("SDL_Texture *") #Foreign("SDL_GetRenderTarget")
SDL_RenderSetLogicalSize(renderer pointer #As("SDL_Renderer *"), w int, h int) int #Foreign("SDL_RenderSetLogicalSize")
SDL_RenderGetLogicalSize(renderer pointer #As("SDL_Renderer *"), w *int, h *int) void #Foreign("SDL_RenderGetLogicalSize")
SDL_RenderSetIntegerScale(renderer pointer #As("SDL_Renderer *"), enable SDL_bool #As("SDL_bool")) int #Foreign("SDL_RenderSetIntegerScale")
SDL_RenderGetIntegerScale(renderer pointer #As("SDL_Renderer *")) SDL_bool #As("SDL_bool") #Foreign("SDL_RenderGetIntegerScale")
SDL_RenderSetViewport(renderer pointer #As("SDL_Renderer *"), rect *SDL_Rect #As("const SDL_Rect *")) int #Foreign("SDL_RenderSetViewport")
SDL_RenderGetViewport(renderer pointer #As("SDL_Renderer *"), rect *SDL_Rect #As("SDL_Rect *")) void #Foreign("SDL_RenderGetViewport")
SDL_RenderSetClipRect(renderer pointer #As("SDL_Renderer *"), rect *SDL_Rect #As("const SDL_Rect *")) int #Foreign("SDL_RenderSetClipRect")
SDL_RenderGetClipRect(renderer pointer #As("SDL_Renderer *"), rect *SDL_Rect #As("SDL_Rect *")) void #Foreign("SDL_RenderGetClipRect")
SDL_RenderIsClipEnabled(renderer pointer #As("SDL_Renderer *")) SDL_bool #As("SDL_bool") #Foreign("SDL_RenderIsClipEnabled")
SDL_RenderSetScale(renderer pointer #As("SDL_Renderer *"), scaleX float, scaleY float) int #Foreign("SDL_RenderSetScale")
SDL_RenderGetScale(renderer pointer #As("SDL_Renderer *"), scaleX *float, scaleY *float) void #Foreign("SDL_RenderGetScale")
SDL_SetRenderDrawColor(renderer pointer #As("SDL_Renderer *"), r byte, g byte, b byte, a byte) int #Foreign("SDL_SetRenderDrawColor")
SDL_GetRenderDrawColor(renderer pointer #As("SDL_Renderer *"), r *byte, g *byte, b *byte, a *byte) int #Foreign("SDL_GetRenderDrawColor")
SDL_SetRenderDrawBlendMode(renderer pointer #As("SDL_Renderer *"), blendMode SDL_BlendMode #As("SDL_BlendMode")) int #Foreign("SDL_SetRenderDrawBlendMode")
SDL_GetRenderDrawBlendMode(renderer pointer #As("SDL_Renderer *"), blendMode *SDL_BlendMode #As("SDL_BlendMode *")) int #Foreign("SDL_GetRenderDrawBlendMode")
SDL_RenderClear(renderer pointer #As("SDL_Renderer *")) int #Foreign("SDL_RenderClear")
SDL_RenderDrawPoint(renderer pointer #As("SDL_Renderer *"), x int, y int) int #Foreign("SDL_RenderDrawPoint")
SDL_RenderDrawPoints(renderer pointer #As("SDL_Renderer *"), points *SDL_Point #As("const SDL_Point *"), count int) int #Foreign("SDL_RenderDrawPoints")
SDL_RenderDrawLine(renderer pointer #As("SDL_Renderer *"), x1 int, y1 int, x2 int, y2 int) int #Foreign("SDL_RenderDrawLine")
SDL_RenderDrawLines(renderer pointer #As("SDL_Renderer *"), points *SDL_Point #As("const SDL_Point *"), count int) int #Foreign("SDL_RenderDrawLines")
SDL_RenderDrawRect(renderer pointer #As("SDL_Renderer *"), rect *SDL_Rect #As("const SDL_Rect *")) int #Foreign("SDL_RenderDrawRect")
SDL_RenderDrawRects(renderer pointer #As("SDL_Renderer *"), rects *SDL_Rect #As("const SDL_Rect *"), count int) int #Foreign("SDL_RenderDrawRects")
SDL_RenderFillRect(renderer pointer #As("SDL_Renderer *"), rect *SDL_Rect #As("const SDL_Rect *")) int #Foreign("SDL_RenderFillRect")
SDL_RenderFillRects(renderer pointer #As("SDL_Renderer *"), rects *SDL_Rect #As("const SDL_Rect *"), count int) int #Foreign("SDL_RenderFillRects")
SDL_RenderCopy(renderer pointer #As("SDL_Renderer *"), texture pointer #As("SDL_Texture *"), srcrect *SDL_Rect #As("const SDL_Rect *"), dstrect *SDL_Rect #As("const SDL_Rect *")) int #Foreign("SDL_RenderCopy")
SDL_RenderCopyEx(renderer pointer #As("SDL_Renderer *"), texture pointer #As("SDL_Texture *"), srcrect *SDL_Rect #As("const SDL_Rect *"), dstrect *SDL_Rect #As("const SDL_Rect *"), angle double, center *SDL_Point #As("const SDL_Point *"), flip SDL_RendererFlip #As("const SDL_RendererFlip")) int #Foreign("SDL_RenderCopyEx")
SDL_RenderDrawPointF(renderer pointer #As("SDL_Renderer *"), x float, y float) int #Foreign("SDL_RenderDrawPointF")
SDL_RenderDrawPointsF(renderer pointer #As("SDL_Renderer *"), points *SDL_FPoint #As("const SDL_FPoint *"), count int) int #Foreign("SDL_RenderDrawPointsF")
SDL_RenderDrawLineF(renderer pointer #As("SDL_Renderer *"), x1 float, y1 float, x2 float, y2 float) int #Foreign("SDL_RenderDrawLineF")
SDL_RenderDrawLinesF(renderer pointer #As("SDL_Renderer *"), points *SDL_FPoint #As("const SDL_FPoint *"), count int) int #Foreign("SDL_RenderDrawLinesF")
SDL_RenderDrawRectF(renderer pointer #As("SDL_Renderer *"), rect *SDL_FRect #As("const SDL_FRect *")) int #Foreign("SDL_RenderDrawRectF")
SDL_RenderDrawRectsF(renderer pointer #As("SDL_Renderer *"), rects *SDL_FRect #As("const SDL_FRect *"), count int) int #Foreign("SDL_RenderDrawRectsF")
SDL_RenderFillRectF(renderer pointer #As("SDL_Renderer *"), rect *SDL_FRect #As("const SDL_FRect *")) int #Foreign("SDL_RenderFillRectF")
SDL_RenderFillRectsF(renderer pointer #As("SDL_Renderer *"), rects *SDL_FRect #As("const SDL_FRect *"), count int) int #Foreign("SDL_RenderFillRectsF")
SDL_RenderCopyF(renderer pointer #As("SDL_Renderer *"), texture pointer #As("SDL_Texture *"), srcrect *SDL_Rect #As("const SDL_Rect *"), dstrect *SDL_FRect #As("const SDL_FRect *")) int #Foreign("SDL_RenderCopyF")
SDL_RenderCopyExF(renderer pointer #As("SDL_Renderer *"), texture pointer #As("SDL_Texture *"), srcrect *SDL_Rect #As("const SDL_Rect *"), dstrect *SDL_FRect #As("const SDL_FRect *"), angle double, center *SDL_FPoint #As("const SDL_FPoint *"), flip SDL_RendererFlip #As("const SDL_RendererFlip")) int #Foreign("SDL_RenderCopyExF")
SDL_RenderReadPixels(renderer pointer #As("SDL_Renderer *"), rect *SDL_Rect #As("const SDL_Rect *"), format uint, pixels pointer, pitch int) int #Foreign("SDL_RenderReadPixels")
SDL_RenderPresent(renderer pointer #As("SDL_Renderer *")) void #Foreign("SDL_RenderPresent")
SDL_DestroyTexture(texture pointer #As("SDL_Texture *")) void #Foreign("SDL_DestroyTexture")
SDL_DestroyRenderer(renderer pointer #As("SDL_Renderer *")) void #Foreign("SDL_DestroyRenderer")
SDL_RenderFlush(renderer pointer #As("SDL_Renderer *")) int #Foreign("SDL_RenderFlush")
SDL_GL_BindTexture(texture pointer #As("SDL_Texture *"), texw *float, texh *float) int #Foreign("SDL_GL_BindTexture")
SDL_GL_UnbindTexture(texture pointer #As("SDL_Texture *")) int #Foreign("SDL_GL_UnbindTexture")
SDL_RenderGetMetalLayer(renderer pointer #As("SDL_Renderer *")) pointer #Foreign("SDL_RenderGetMetalLayer")
SDL_RenderGetMetalCommandEncoder(renderer pointer #As("SDL_Renderer *")) pointer #Foreign("SDL_RenderGetMetalCommandEncoder")
SDL_SensorType enum #Flags {
	SDL_SENSOR_INVALID_ffigen_modified = 4294967295_u
	SDL_SENSOR_UNKNOWN = 0_u
	SDL_SENSOR_ACCEL = 1_u
	SDL_SENSOR_GYRO = 2_u
}
SDL_NumSensors() int #Foreign("SDL_NumSensors")
SDL_SensorGetDeviceName(device_index int) *sbyte #Foreign("SDL_SensorGetDeviceName")
SDL_SensorGetDeviceType(device_index int) SDL_SensorType #As("SDL_SensorType") #Foreign("SDL_SensorGetDeviceType")
SDL_SensorGetDeviceNonPortableType(device_index int) int #Foreign("SDL_SensorGetDeviceNonPortableType")
SDL_SensorGetDeviceInstanceID(device_index int) int #Foreign("SDL_SensorGetDeviceInstanceID")
SDL_SensorOpen(device_index int) pointer #As("SDL_Sensor *") #Foreign("SDL_SensorOpen")
SDL_SensorFromInstanceID(instance_id int) pointer #As("SDL_Sensor *") #Foreign("SDL_SensorFromInstanceID")
SDL_SensorGetName(sensor pointer #As("SDL_Sensor *")) *sbyte #Foreign("SDL_SensorGetName")
SDL_SensorGetType(sensor pointer #As("SDL_Sensor *")) SDL_SensorType #As("SDL_SensorType") #Foreign("SDL_SensorGetType")
SDL_SensorGetNonPortableType(sensor pointer #As("SDL_Sensor *")) int #Foreign("SDL_SensorGetNonPortableType")
SDL_SensorGetInstanceID(sensor pointer #As("SDL_Sensor *")) int #Foreign("SDL_SensorGetInstanceID")
SDL_SensorGetData(sensor pointer #As("SDL_Sensor *"), data *float, num_values int) int #Foreign("SDL_SensorGetData")
SDL_SensorClose(sensor pointer #As("SDL_Sensor *")) void #Foreign("SDL_SensorClose")
SDL_SensorUpdate() void #Foreign("SDL_SensorUpdate")
SDL_CreateShapedWindow(title *sbyte, x uint, y uint, w uint, h uint, flags uint) pointer #As("SDL_Window *") #Foreign("SDL_CreateShapedWindow")
SDL_IsShapedWindow(window pointer #As("const SDL_Window *")) SDL_bool #As("SDL_bool") #Foreign("SDL_IsShapedWindow")
SDL_WindowShapeParams_Variant0 struct {
	binarizationCutoff byte
}
SDL_WindowShapeParams_Variant1 struct {
	colorKey SDL_Color
}
SDL_WindowShapeParams struct {
	padding_0 byte
	padding_1 byte
	padding_2 byte
	padding_3 byte
}
WindowShapeMode enum #Flags {
	ShapeModeDefault = 0_u
	ShapeModeBinarizeAlpha = 1_u
	ShapeModeReverseBinarizeAlpha = 2_u
	ShapeModeColorKey = 3_u
}
SDL_WindowShapeMode struct {
	mode WindowShapeMode
	parameters SDL_WindowShapeParams
}
SDL_SetWindowShape(window pointer #As("SDL_Window *"), shape *SDL_Surface #As("SDL_Surface *"), shape_mode *SDL_WindowShapeMode #As("SDL_WindowShapeMode *")) int #Foreign("SDL_SetWindowShape")
SDL_GetShapedWindowMode(window pointer #As("SDL_Window *"), shape_mode *SDL_WindowShapeMode #As("SDL_WindowShapeMode *")) int #Foreign("SDL_GetShapedWindowMode")
SDL_LinuxSetThreadPriority(threadID long, priority int) int #Foreign("SDL_LinuxSetThreadPriority")
SDL_IsTablet() SDL_bool #As("SDL_bool") #Foreign("SDL_IsTablet")
SDL_OnApplicationWillTerminate() void #Foreign("SDL_OnApplicationWillTerminate")
SDL_OnApplicationDidReceiveMemoryWarning() void #Foreign("SDL_OnApplicationDidReceiveMemoryWarning")
SDL_OnApplicationWillResignActive() void #Foreign("SDL_OnApplicationWillResignActive")
SDL_OnApplicationDidEnterBackground() void #Foreign("SDL_OnApplicationDidEnterBackground")
SDL_OnApplicationWillEnterForeground() void #Foreign("SDL_OnApplicationWillEnterForeground")
SDL_OnApplicationDidBecomeActive() void #Foreign("SDL_OnApplicationDidBecomeActive")
SDL_GetTicks() uint #Foreign("SDL_GetTicks")
SDL_GetPerformanceCounter() ulong #Foreign("SDL_GetPerformanceCounter")
SDL_GetPerformanceFrequency() ulong #Foreign("SDL_GetPerformanceFrequency")
SDL_Delay(ms uint) void #Foreign("SDL_Delay")
SDL_AddTimer(interval uint, callback pointer #As("SDL_TimerCallback"), param pointer) int #Foreign("SDL_AddTimer")
SDL_RemoveTimer(id int) SDL_bool #As("SDL_bool") #Foreign("SDL_RemoveTimer")
SDL_version struct {
	major byte
	minor byte
	patch byte
}
SDL_GetVersion(ver *SDL_version #As("SDL_version *")) void #Foreign("SDL_GetVersion")
SDL_GetRevision() *sbyte #Foreign("SDL_GetRevision")
SDL_GetRevisionNumber() int #Foreign("SDL_GetRevisionNumber")
SDL_Init(flags uint) int #Foreign("SDL_Init")
SDL_InitSubSystem(flags uint) int #Foreign("SDL_InitSubSystem")
SDL_QuitSubSystem(flags uint) void #Foreign("SDL_QuitSubSystem")
SDL_WasInit(flags uint) uint #Foreign("SDL_WasInit")
SDL_Quit() void #Foreign("SDL_Quit")
:AUDIO_S16 ushort = 32784_us
:SDL_AUDIO_ALLOW_FREQUENCY_CHANGE int = 1
:SDL_AUDIO_ALLOW_FORMAT_CHANGE int = 2
:SDL_AUDIO_ALLOW_CHANNELS_CHANGE int = 4
:SDL_AUDIO_ALLOW_SAMPLES_CHANGE int = 8
:SDL_AUDIO_ALLOW_ANY_CHANGE int = 15
:SDL_WINDOWPOS_UNDEFINED_MASK int = 536805376
:SDL_WINDOWPOS_UNDEFINED int = 536805376
:SDL_WINDOWPOS_CENTERED_MASK int = 805240832
:SDL_WINDOWPOS_CENTERED int = 805240832
:KMOD_CTRL uint = 192_u
:KMOD_SHIFT uint = 3_u
:KMOD_ALT uint = 768_u
:KMOD_GUI uint = 3072_u
:SDL_BUTTON_LEFT byte = 1_b
:SDL_BUTTON_MIDDLE byte = 2_b
:SDL_BUTTON_RIGHT byte = 3_b
:SDL_BUTTON_X1 byte = 4_b
:SDL_BUTTON_X2 byte = 5_b
:SDL_BUTTON_LMASK byte = 1_b
:SDL_BUTTON_MMASK byte = 2_b
:SDL_BUTTON_RMASK byte = 4_b
:SDL_BUTTON_X1MASK byte = 8_b
:SDL_BUTTON_X2MASK byte = 16_b
:SDL_WINDOW_LACKS_SHAPE uint = 4294967293_u
:SDL_INIT_TIMER uint = 1_u
:SDL_INIT_AUDIO uint = 16_u
:SDL_INIT_VIDEO uint = 32_u
:SDL_INIT_JOYSTICK uint = 512_u
:SDL_INIT_HAPTIC uint = 4096_u
:SDL_INIT_GAMECONTROLLER uint = 8192_u
:SDL_INIT_EVENTS uint = 16384_u
:SDL_INIT_SENSOR uint = 32768_u
:SDL_INIT_NOPARACHUTE uint = 1048576_u
:SDL_INIT_EVERYTHING uint = 62001_u
